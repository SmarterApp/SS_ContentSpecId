package org.opentestsystem.ss.contentspecid;

import javax.annotation.Nonnull;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.ss.contentspecid.ContentSpecIdFormat.ENHANCED;
import static org.opentestsystem.ss.contentspecid.ErrorSeverity.CORRECTED;
import static org.opentestsystem.ss.contentspecid.ErrorSeverity.INVALID;

/**
 * Created by Greg Charles on 11/9/18.
 */
public class ContentSpecIdParser {
    private Map<String, Pattern> cachedRegex = new HashMap<>();
    private LegacyContentSpecIdParser legacyParser;

    protected static final String NOT_APPLICABLE = "NA";

    public ContentSpecIdParser() {
        // Legacy parser will be lazy loaded through getLegacyParcer() call.
    }

    public ContentSpecIdParser(LegacyContentSpecIdParser legacyParser) {
        this.legacyParser = legacyParser;
    }

    public ContentSpecIdFormat getFormatType(@Nonnull final String input) throws IdParseException {
        String idString = cleanInput(input);

        if (idString.startsWith("E") || idString.startsWith("M")) {
            return ENHANCED;
        } else {
            return getLegacyParser().getFormatType(idString);
        }
    }

    public ContentSpecIdModel parse(String input) throws IdParseException {
        return parse(input, ContentSpecGrade.UNSPECIFIED);
    }

    public ContentSpecIdModel parse(String input, ContentSpecGrade grade) throws IdParseException {
        if (getFormatType(input).isLegacy()) {
            return getLegacyParser().parse(input, grade);
        }

        final String idString = cleanInput(input);

        ContentSpecIdModel id = new ContentSpecIdModel();

        String[] parts = idString.split("\\.");

        id.setSubject(convertSubject(parts[0]));

        if (parts.length > 1) {
            id.setGrade(convertGrade(parts[1]));
        }

        String domain = "";
        if (parts.length > 2) {
            id.setClaim(convertClaim(parts[2]));

            // Parse out domain now, but hold on to it until other parts are added to the model
            if (parts[2].length() > 2) {
                domain = parts[2].substring(2);
            }
        }

        if (parts.length > 3) {
            id.setTarget(convertTarget(parts[3]));
        }

        if (parts.length > 4) {
            id.setCcss(convertCcss(
                    Arrays.stream(parts)
                    .skip(4)
                    .collect(Collectors.joining("."))));
        }

        boolean isMathNonPrimaryClaim = id.isMath() && id.getClaim() != ContentSpecClaim.C1;

        id.setDomain(convertDomain(domain, id.deriveDomain(), isMathNonPrimaryClaim));

        return id;
    }

    public String format(ContentSpecIdModel id) {
        return format(id, ENHANCED);
    }

    public String format(ContentSpecIdModel id, ContentSpecIdFormat format) {
        if (!(id.isEla() || id.isMath())) {
            return "";
        }

        if (format == null || format.isUnknown()) {
            return "";
        }

        if (format.isLegacy()) {
            return legacyParser.format(id, format);
        }

        StringBuilder sb = new StringBuilder();
        sb.append(id.isEla() ? 'E' : 'M');

        if (id.getGrade() != ContentSpecGrade.UNSPECIFIED) {
            sb.append('.').append(id.getGrade().name()); // Includes the 'G' prefix

            if (id.getClaim() != ContentSpecClaim.UNSPECIFIED) {
                sb.append('.').append(id.getClaim().name()); // Includes the 'C' prefix

                // Either Conceptual category (High School) or Domain (Grades 3-8)
                String domain = id.getDomain();
                if (isNotBlank(domain) && !domain.equals(NOT_APPLICABLE)) {
                    sb.append(domain);
                }

                if (isNotBlank(id.getTarget())) {
                    sb.append(".T").append(id.getTarget());

                    if (isNotBlank(id.getCcss())) {
                        sb.append('.').append(id.getCcss());
                    }
                }
            }
        }

        return sb.toString();
    }

    public String formatLegacy(ContentSpecIdModel id) {
        return getLegacyParser().format(id);
    }

    protected ContentSpecSubject convertSubject(final String subject) throws IdParseException {
        switch (subject) {
            case "E":
                return ContentSpecSubject.ELA;
            case "M":
                return ContentSpecSubject.MATH;
        }

        throw new IdParseException(INVALID,
                String.format("Subject must be 'E' or 'M'; found '%s'", subject));
    }

    protected ContentSpecGrade convertGrade(String gradeString) throws IdParseException {
            ContentSpecGrade grade = ContentSpecGrade.fromString(gradeString);
            if (grade != ContentSpecGrade.UNSPECIFIED) {
                return grade;
            }

            throw new IdParseException(INVALID,
                    String.format("Expected grade in ID but found '%s'.", gradeString));
    }

    protected ContentSpecClaim convertClaim(String claimAndDomainString) throws IdParseException {
        if (isNotBlank(claimAndDomainString)) {
            String claimString = claimAndDomainString;
            if (claimString.length() > 2) {
                claimString = claimString.substring(0, 2);
            }
            ContentSpecClaim claim = ContentSpecClaim.fromString(claimString);
            if (claim != ContentSpecClaim.UNSPECIFIED) {
                return claim;
            }
        }

        throw new IdParseException(INVALID,
                        String.format("Expected claim in ID but found '%s'.", claimAndDomainString));
    }

    protected String convertTarget(String targetString) throws IdParseException {
        // So far, this is the only validation we do.
        if (targetString != null && targetString.length() > 1 && targetString.startsWith("T")) {
            // Target string is all characters following the "T" prefix
            return targetString.substring(1);
        }

        throw new IdParseException(INVALID,
                    String.format("Expected non-empty target in ID but found '%s'.", targetString));
    }

    protected String convertCcss(String ccss) throws IdParseException {
        if (isBlank(ccss)) {
            throw new IdParseException(INVALID, "CCSS must not be empty.");
        }

        return ccss;
    }

    protected String convertDomain(String domain, String expectedDomain, boolean isMathNonPrimaryClaim)
            throws IdParseException {
        if (isBlank(domain) || domain.equals(NOT_APPLICABLE)) {
            return expectedDomain;
        }

        if (isMathNonPrimaryClaim) {
            return domain;
        }

        // Otherwise, check that the value is what we expect it to be.
        if (!isBlank(expectedDomain) && !domain.equals(expectedDomain)) {
            throw new IdParseException(CORRECTED,
                    String.format("Incorrect domain in parsed ID. Found '%s', expected '%s'.",
                            domain, expectedDomain));
        }

        return domain;
    }

    protected static String cleanInput(final String input) throws IdParseException {
        if (isBlank(input)) {
            throw new IdParseException(INVALID, "Cannot process a blank ID");
        }

        return input.trim();
    }

    protected Pattern patternForRegex(String regex) {
        if (!cachedRegex.containsKey(regex)) {
            cachedRegex.put(regex, Pattern.compile(regex));
        }

        return cachedRegex.get(regex);
    }

    private LegacyContentSpecIdParser getLegacyParser() {
        if (legacyParser == null) {
            legacyParser = new LegacyContentSpecIdParser();
        }

        return legacyParser;
    }
}
