package org.opentestsystem.ss.contentspecid;

import org.apache.commons.lang3.StringUtils;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import static java.lang.String.format;
import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.trimToEmpty;

/**
 * Created by Greg Charles on 10/31/18.
 */
public class ContentSpecId implements Comparable<ContentSpecId> {
    private static final String MAIN = "m";
    private static final String ADDITIONAL_SUPPORTING = "a/s";
    private static final String NOT_APPLICABLE = "NA";
    private static final String PRIORITY_CLUSTER = "P";
    private static final String SUPPORTING_CLUSTER = "S";

    private static final int MAX_ELA_TARGET = 14;
    private static final int MAX_MATH_TARGET = 16;

    // Optional C prefix, followed by a number, followed by optional lowercase letter suffix
    private static final Pattern ELA_TARGET_REGEX = Pattern.compile("C?(\\d+)[a-z]?");
    private static final Pattern MATH_TARGET_REGEX = Pattern.compile("T?([A-Z])");
    private static final Pattern LEGACY_CCSS_REGEX = Pattern.compile("((\\S*)-[^\\.]*)\\.\\S*");

    private static final Map<ContentSpecGrade, DomainCode[]> MATH_DOMAIN_MAP = new HashMap<>();
    private static final Map<ContentSpecGrade, boolean []> MATH_EMPHASIS_MAP = new HashMap<>();
    private static final Map<ContentSpecGrade, int []> MATH_TARGET_SET_MAP = new HashMap<>();

    static {
        // Populate domains for grades 3 through 8 for targets 1 - 12 plus high school with arrays for targets 1 - 16
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G3,
                new DomainCode[] { DomainCode.OA, DomainCode.OA,  DomainCode.OA,  DomainCode.OA, DomainCode.NBT,  DomainCode.NF,  DomainCode.MD,  DomainCode.MD,  DomainCode.MD,  DomainCode.MD,   DomainCode.G, DomainCode.UNK });
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G4,
                new DomainCode[] { DomainCode.OA, DomainCode.OA,  DomainCode.OA, DomainCode.NBT, DomainCode.NBT,  DomainCode.NF,  DomainCode.NF,  DomainCode.NF,  DomainCode.MD,  DomainCode.MD,  DomainCode.MD, DomainCode.G });
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G5,
                new DomainCode[] { DomainCode.OA, DomainCode.OA, DomainCode.NBT, DomainCode.NBT,  DomainCode.NF,  DomainCode.NF,  DomainCode.MD,  DomainCode.MD,  DomainCode.MD,   DomainCode.G,   DomainCode.G, DomainCode.UNK });
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G6,
                new DomainCode[] { DomainCode.RP, DomainCode.NS,  DomainCode.NS,  DomainCode.NS,  DomainCode.EE,  DomainCode.EE,  DomainCode.EE,   DomainCode.G,  DomainCode.SP,  DomainCode.SP, DomainCode.UNK, DomainCode.UNK });
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G7,
                new DomainCode[] { DomainCode.RP, DomainCode.NS,  DomainCode.EE,  DomainCode.EE,   DomainCode.G,   DomainCode.G,  DomainCode.SP,  DomainCode.SP,  DomainCode.SP, DomainCode.UNK, DomainCode.UNK, DomainCode.UNK });
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G8,
                new DomainCode[] { DomainCode.NS, DomainCode.EE,  DomainCode.EE,  DomainCode.EE,   DomainCode.F,   DomainCode.F,   DomainCode.G,   DomainCode.G,   DomainCode.G,  DomainCode.SP, DomainCode.UNK, DomainCode.UNK });
        MATH_DOMAIN_MAP.put(ContentSpecGrade.GHS,
                new DomainCode[] {  DomainCode.N,  DomainCode.N,   DomainCode.N,   DomainCode.A,   DomainCode.A,   DomainCode.A,   DomainCode.A,   DomainCode.A,   DomainCode.A,   DomainCode.A,   DomainCode.F,   DomainCode.F,  DomainCode.F,   DomainCode.F,   DomainCode.G,   DomainCode.S });


        // Populate emphases for grades 3 through 8 for targets 1 - 12 plus high school with arrays for targets 1 - 16
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.G3,
                new boolean[] {  true,  true,  true,  true, false,  true,  true, false,  true, false, false, false });
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.G4,
                new boolean[] {  true, false, false,  true,  true,  true,  true,  true, false, false, false, false });
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.G5,
                new boolean[] { false, false,  true,  true,  true,  true, false, false,  true, false, false, false });
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.G6,
                new boolean[] {  true,  true, false,  true,  true,  true,  true, false, false, false, false, false });
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.G7,
                new boolean[] {  true,  true,  true,  true, false, false, false, false, false, false, false, false });
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.G8,
                new boolean[] { false,  true,  true,  true,  true,  true,  true,  true, false, false, false, false });
        MATH_EMPHASIS_MAP.put(ContentSpecGrade.GHS,
                new boolean[] { false, false, false, true, true, true, true, true, true, true, true, true,
                        true, true, false, false });

        // Populate target sets for grades 3 through 8 and high school with arrays for targets 1 - 16
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.G3,
                new int[] { 3 ,1 ,1 ,2 ,4 ,2 ,1 ,5 ,1 ,4 ,4 ,0 ,0 ,0 ,0 ,0 });
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.G4,
                new int[] { 1 ,6 ,6 ,3 ,1 ,1 ,2 ,4 ,5 ,6 ,5 ,7 ,0 ,0 ,0 ,0 });
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.G5,
                new int[] { 5 ,5 ,3 ,3 ,1 ,2 ,5 ,5 ,1 ,4 ,4 ,0 ,0 ,0 ,0 ,0 });
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.G6,
                new int[] { 2 ,3 ,5 ,4 ,1 ,1 ,3 ,5 ,5 ,5 ,0 ,0 ,0 ,0 ,0 ,0 });
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.G7,
                new int[] { 1 ,2 ,2 ,1 ,3 ,3 ,4 ,4 ,4 ,0 ,0 ,0 ,0 ,0 ,0 ,0 });
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.G8,
                new int[] { 4 ,2 ,1 ,1 ,2 ,3 ,2 ,3 ,4 ,4 ,0 ,0 ,0 ,0 ,0 ,0 });
        MATH_TARGET_SET_MAP.put(ContentSpecGrade.GHS,
                new int[] { 9 ,9,10 ,1 ,1 ,2 ,3 ,3 ,3 ,4 ,5 ,6 ,6 ,6 ,7 ,8 });
    }

    // Primary properties
    private ContentSpecSubject subject = ContentSpecSubject.UNSPECIFIED;
    private ContentSpecGrade grade = ContentSpecGrade.UNSPECIFIED; // K = 0, 11 = High School, -1 = unknown
    private ContentSpecClaim claim = ContentSpecClaim.UNSPECIFIED;
    private String target = "";
    private String ccss = ""; // Common core state standard
    String domain = null;
    private ContentSpecIdFormat parseFormat = ContentSpecIdFormat.UNKNOWN;

    // Validation features
    private boolean modifiedSinceLastValidation = false;
    private String parseError = null;
    private ErrorSeverity parseErrorSeverity = ErrorSeverity.NO_ERROR;
    private String validationError = null;
    private ErrorSeverity validationErrorSeverity = ErrorSeverity.NO_ERROR;

    public ContentSpecSubject getSubject() {
        return subject;
    }

    public void setSubject(ContentSpecSubject subject) {
        this.subject = subject;
        resetStatus();
    }

    public ContentSpecGrade getGrade() {
        return grade;
    }

    public void setGrade(ContentSpecGrade grade) {
        this.grade = grade;
        resetStatus();
    }

    /**
     *  Legacy grade is the grade number without the "G" prefix. High school is 11.
     * @return int value converted to string
     */
    public String getLegacyGrade() {
        if (grade == null || grade == ContentSpecGrade.UNSPECIFIED) {
            return "";
        }

        return String.valueOf(grade.getLegacyValue());
    }

    public ContentSpecClaim getClaim() {
        return claim;
    }

    public void setClaim(ContentSpecClaim claim) {
        this.claim = claim;
        resetStatus();
    }

    /**
     * Legacy claim is the claim number in string form without the "C" prefix.
     * @return int value converted to string
     */
    public String getLegacyClaim() {
        if (claim == null || claim == ContentSpecClaim.UNSPECIFIED) {
            return "";
        }

        return String.valueOf(claim.getValue());
    }

    public String getTarget() {
        return target;
    }

    public void setTarget(String target) {
        this.target = trimToEmpty(target);
        resetStatus();
    }

    public String getCcss() {
        return ccss;
    }

    public void setCcss(String ccss) {
        this.ccss = trimToEmpty(ccss);
        resetStatus();
    }

    public String getDomain() {
        if (domain != null) {
            return domain;
        }

        // Doing it this way without setting domain allows the
        // domain to be sensitive to future changes to claim and target.
        return deriveDomain();
    }

    public void setDomain(String domain) {
        this.domain = domain;
    }

    public String getLegacyDomain() {
        String domain = getDomain();

        // TODO: check comments against spec. Is it all Claim 1, or just Math?
        // If Claim 1 and high school, and the domain matches the the beginning
        // of the ccss then return the extended domain from the CCSS standard.
        // For example: if (Domain == "G" and CCSS == "G-SRT.6") return "G-SRT";
        if (subject == ContentSpecSubject.MATH && grade == ContentSpecGrade.GHS) {
            Matcher matcher = LEGACY_CCSS_REGEX.matcher(ccss);
            if (matcher.find()) {
                if (matcher.group(2).equals(domain)) {
                    domain = matcher.group(1);
                }
            }
        } else if (subject == ContentSpecSubject.ELA) {
            // Translate ELA domains
            switch (domain) {
                case "RL":
                    domain = "LT"; // Reading Literary Texts
                    break;
                case "RI":
                    domain = "IT"; // Reading Informational Texts
                    break;
                case "WN":
                case "WI":
                case "WO":
                case "WE":
                case "WA":
                case "WG":
                    domain = "W"; // Writing
                    break;
                case "SL":
                    domain = "L"; // Listening
                    break;
                case "R":
                    domain = "CR"; // Research & Inquiry - Communicating Reasoning
                    break;
            }
        }

        return domain;
    }

    public void setLegacyDomain(String domain) {
        if (domain == null) {
            this.domain = null;
        } else if (domain.indexOf('-') > 0) {
            this.domain = domain.substring(0, domain.indexOf('-'));
        } else if (subject == ContentSpecSubject.ELA) {
            switch (domain) {
                case "LT":
                    this.domain = "RL"; // Reading Literary Texts
                    break;
                case "IT":
                    this.domain = "RI"; // Reading Informational Texts
                    break;
                case "W":
                    // If grade, claim, and target results in a writing domain
                    // then set the derived value, else set the value we got
                    String d = deriveElaDomain(grade, claim, target);
                    this.domain = d.startsWith("W") ? d : domain;
                    break;
                case "L":
                    this.domain = "SL"; // Speaking and Listening
                    break;
                case "CR":
                    this.domain = "R"; // Research & Inquiry - Communicating Reasoning
                    break;
                default:
                    this.domain = domain;
                    break;
            }
        } else {
            this.domain = domain;
        }
    }

    public ContentSpecEmphasis getEmphasis() {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return ContentSpecEmphasis.NOT_APPLICABLE;
        }

        ContentSpecEmphasis emphasis = ContentSpecEmphasis.AS;

        char targetValue = parseMathTarget(target);
        int index = targetValue - 'A'; // Converts A - P to 0 - 15

        if (MATH_EMPHASIS_MAP.containsKey(grade)) {
            boolean[] emphasisByGrade = MATH_EMPHASIS_MAP.get(grade);
            if (index >= 0 && index < emphasisByGrade.length) {
                emphasis = emphasisByGrade[index] ? ContentSpecEmphasis.M : ContentSpecEmphasis.AS;

                if (targetValue == 'O' && isNotBlank(ccss) && !ccss.startsWith("G-SRT")) {
                    // This is an odd case. Sometimes when recording secondary alignment to a CCSS
                    // standard that's not referenced in teh content specification, staff have used
                    // a target of "O" for "Other". Usually, and preferably, they have used a target
                    // of "X". The trouble with "O" is that it's a legitimate target and is "m"
                    // whereas other alignments should be "a/s". We solve this by looking at the CCSS
                    // alignment. If it does not start with "G-SRT" which is the proper standard for
                    // target "O" then we set the emphasis to "a/s".
                    emphasis = ContentSpecEmphasis.AS;
                }
            }
        }

        return emphasis;
    }

    public String getLegacyEmphasis() {
        switch(getEmphasis()) {
            case M:
                return MAIN;
            case AS:
                return ADDITIONAL_SUPPORTING;
            default:
                return NOT_APPLICABLE;
        }
    }

    public String getLegacyContentCategory() {
        if (subject != ContentSpecSubject.MATH) {
            return NOT_APPLICABLE;
        }

        if (claim == ContentSpecClaim.C1) {
            switch (getEmphasis()) {
                case M:
                    return PRIORITY_CLUSTER;
                case AS:
                    return SUPPORTING_CLUSTER;
                default:
                    return NOT_APPLICABLE;
            }
        }

        if (domain != null) {
            return domain;
        }

        return NOT_APPLICABLE;
    }

    public int getTargetSet() {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return 0;
        }

        if (MATH_TARGET_SET_MAP.containsKey(grade)) {
            char targetValue = parseMathTarget(target);
            int index = targetValue - 'A'; // convertSubject target A - P to 0 - 15

            int [] targetSet = MATH_TARGET_SET_MAP.get(grade);
            if (index >= 0 && index < targetSet.length) {
                return targetSet[index];
            }
        }

        return 0;
    }

    public String getLegacyTargetSet() {
        int ts = getTargetSet();
        return (ts == 0) ? NOT_APPLICABLE : format("TS%02d", ts);
    }

    public boolean isEmpty() {
        return subject == ContentSpecSubject.UNSPECIFIED
                && grade == ContentSpecGrade.UNSPECIFIED
                && claim == ContentSpecClaim.UNSPECIFIED
                && isBlank(target)
                && isBlank(ccss);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ContentSpecId that = (ContentSpecId) o;
        return subject == that.subject &&
                grade == that.grade &&
                claim == that.claim &&
                Objects.equals(target, that.target) &&
                Objects.equals(ccss, that.ccss) &&
                Objects.equals(domain, that.domain);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subject, grade, claim, target, ccss, domain);
    }

    @Override
    public String toString() {
        ContentSpecIdFormat format = (parseFormat == ContentSpecIdFormat.UNKNOWN)
                ? ContentSpecIdFormat.ENHANCED
                : parseFormat;

        // Enhanced format can handle partially-correct values.
        if (format != ContentSpecIdFormat.ENHANCED && validateFor(format) == ErrorSeverity.INVALID) {
            return "";
        }

        String fmt;

        switch (format) {
            case ENHANCED:
                return toStringEnhanced();

            case ELA_V1:
                fmt = format("SBAC-ELA-v1:%s-%s|%s-%s",
                        getLegacyClaim(), getLegacyDomain(), getTarget(), getLegacyGrade());
                if (isNotBlank(ccss)) {
                    fmt += ("|" + ccss);
                }

                break;

            case MATH_V4:
            case MATH_V5:
                fmt = format("SBAC-MA-v%d:%s|%s|%s-%s|%s", format.getValue(), getLegacyClaim(), getLegacyDomain(),
                        getTarget(), getLegacyGrade(), getLegacyEmphasis());

                if (isNotBlank(ccss)) {
                    fmt += ("|" + ccss);
                }

                break;

            case MATH_V6:
                fmt = format("SBAC-MA-v6:%s|%s|%s|%s-%s", getLegacyClaim(), getLegacyContentCategory(),
                        getLegacyTargetSet(), getTarget(), getLegacyGrade());
                break;
            default:
                throw new IllegalArgumentException("Invalid format");
        }

        return fmt;
    }

    private String toStringEnhanced() {
        StringBuilder sb = new StringBuilder();
        switch (subject) {
            case ELA:
                sb.append('E');
                break;
            case MATH:
                sb.append('M');
                break;
            default:
                return "";
        }

        if (grade != ContentSpecGrade.UNSPECIFIED) {
            sb.append('.');
            sb.append(grade.name()); // Includes the 'G' prefix

            if (claim != ContentSpecClaim.UNSPECIFIED) {
                sb.append('.');
                sb.append(claim.name()); // Includes the 'G' prefix

                // Either Conceptual category (High School) or Domain (Grades 3-8)
                String domain = getDomain();
                if (isNotBlank(domain) && !domain.equals(NOT_APPLICABLE)) {
                    sb.append(domain);
                }

                if (isNotBlank(target)) {
                    sb.append(".T");
                    sb.append(target);

                    if (isNotBlank(ccss)) {
                        sb.append('.');
                        sb.append(ccss);
                    }
                }
            }
        }

        return sb.toString();
    }

    public ErrorSeverity validateFor(ContentSpecIdFormat format) {
        // Check for general validity
        ErrorSeverity validity = validate();
        if (validity == ErrorSeverity.INVALID) {
            return validity;
        }

        validationError = null;

        // Check for valid format and for subject match
        boolean requiresDetail = false;
        switch (format) {
            case ENHANCED:
                if (subject == ContentSpecSubject.UNSPECIFIED) {
                    validationError = "Subject is Unspecified.";
                    return ErrorSeverity.INVALID;
                }
                break;

            case ELA_V1:
                if (subject != ContentSpecSubject.ELA)
                {
                    validationError = "For format ElaV1, Subject must be ELA.";
                    return ErrorSeverity.INVALID;
                }
                requiresDetail = true;
                break;

            case MATH_V4:
            case MATH_V5:
            case MATH_V6:
                if (subject != ContentSpecSubject.MATH) {
                    validationError = format("For format %s, Subject must be Math.", format.name());
                    return ErrorSeverity.INVALID;
                }
                requiresDetail = true;
                break;

            default:
                validationError = format("Invalid format '%s'.", format);
                return ErrorSeverity.INVALID;
        }

        if (requiresDetail) {
            if (grade == ContentSpecGrade.UNSPECIFIED) {
                validationError = format("For format %s, Grade must be specified.", format.name());
                return ErrorSeverity.INVALID;
            }

            if (claim == ContentSpecClaim.UNSPECIFIED) {
                validationError = format("For format %s, Claim must be specified.", format.name());
                return ErrorSeverity.INVALID;
            }
            if (isBlank(target)) {
                validationError = format("For format %s, Target must be specified.", format.name());
                return ErrorSeverity.INVALID;
            }
        }

        return ErrorSeverity.NO_ERROR;
    }

    private ErrorSeverity validate() {
        if (modifiedSinceLastValidation) {
            validationError = null;
            modifiedSinceLastValidation = false;

            if (subject == ContentSpecSubject.UNSPECIFIED) {
                appendValidationError(ErrorSeverity.INVALID, "Subject is not valid.");
            }

            if (grade == ContentSpecGrade.UNSPECIFIED) {
                appendValidationError(ErrorSeverity.INVALID, "Grade is not valid.");
            }

            if (claim == ContentSpecClaim.UNSPECIFIED) {
                appendValidationError(ErrorSeverity.INVALID, "Claim is not valid.");
            }

            if (isBlank(target)) {
                appendValidationError(ErrorSeverity.INVALID, "Target has not been specified.");
            }

            if (isBlank(ccss) &&
                    ((subject == ContentSpecSubject.ELA) ||
                    (subject == ContentSpecSubject.MATH && claim == ContentSpecClaim.C1))) {
                appendValidationError(ErrorSeverity.INVALID, "CCSS has not been specified.");
            }
        }

        return validationErrorSeverity;
    }

    public ContentSpecIdFormat getParseFormat() {
        return parseFormat;
    }

    public void setParseFormat(ContentSpecIdFormat parseFormat) {
        this.parseFormat = parseFormat;
    }

    public boolean isParseSucceeded() {
        return parseErrorSeverity == ErrorSeverity.NO_ERROR;
    }

    public ErrorSeverity getParseErrorSeverity() {
        return parseErrorSeverity;
    }

    public String getParseErrorDescription() {
        return parseError;
    }

    public ErrorSeverity getValidationErrorSeverity() {
        return validationErrorSeverity;
    }

    public String getValidationErrorDescription() {
        return validationError;
    }

    private String deriveDomain() {
        switch (subject) {
            case ELA:
                return deriveElaDomain(grade, claim, target);

            case MATH:
                return deriveMathDomain(grade, claim, target);

            default:
                return ""; // Unknown
        }
    }

    private String deriveElaDomain(ContentSpecGrade grade, ContentSpecClaim claim, String target) {
        int targetValue = parseElaTarget(target);
        if (targetValue == 0) {
            return "";
        }

        DomainCode domainCode;

        switch (claim)
        {
            case C1:
                domainCode = (targetValue < 8) ? DomainCode.RL : DomainCode.RI;
                break;

            case C2:
                if (grade.compareTo(ContentSpecGrade.G5) <= 0) {
                    if (targetValue <= 2) domainCode = DomainCode.WN;
                    else if (targetValue <= 5) domainCode = DomainCode.WI;
                    else if (targetValue <= 7) domainCode = DomainCode.WO;
                    else domainCode = DomainCode.WG;
                } else {
                    if (targetValue <= 2) domainCode = DomainCode.WN;
                    else if (targetValue <= 5) domainCode = DomainCode.WE;
                    else if (targetValue <= 7) domainCode = DomainCode.WA;
                    else domainCode = DomainCode.WG;
                }
                break;

            case C3:
                domainCode = DomainCode.SL;
                break;

            case C4:
                domainCode = DomainCode.R;
                break;

            default:
                domainCode = DomainCode.UNK;
                break;
        }

        return (domainCode == DomainCode.UNK) ? "" : domainCode.name();
    }

    private int parseElaTarget(String target) {
        if (isBlank(target)) {
            return 0;
        }

        Matcher matcher = ELA_TARGET_REGEX.matcher(target);
        if (matcher.find()) {
            try {
                int value = Integer.parseInt(matcher.group(1));
                return (value < 1 || value > MAX_ELA_TARGET) ? 0 : value;
            } catch (NumberFormatException nfe) {
                // TODO: log
            }
        }

        return 0;
    }

    private String deriveMathDomain(ContentSpecGrade grade, ContentSpecClaim claim, String target) {
        // Must be claim 1
        if (claim != ContentSpecClaim.C1) {
            return DomainCode.NA.name();
        }

        char targetValue = parseMathTarget(target);
        int index = targetValue - 'A'; // converts A - P to 0 - 15

        DomainCode domain = DomainCode.UNK;

        if (MATH_DOMAIN_MAP.containsKey(grade)) {
            DomainCode[] domainsForGrade = MATH_DOMAIN_MAP.get(grade);
            if (index >= 0 && targetValue < domainsForGrade.length) {
                domain = domainsForGrade[index];
            }
        }

        return (domain == DomainCode.UNK) ? "" : domain.name();
    }

    private char parseMathTarget(String target) {
        if (isBlank(target)) {
            return 0;
        }

        Matcher matcher = MATH_TARGET_REGEX.matcher(target);
        if (matcher.find()) {
            return matcher.group(1).charAt(0);
        }

        return '\0';
    }


    private void resetStatus() {
//        modifiedSinceLastValidation = true;
//        validationError = null;
//        parseError = null;
//        parseErrorSeverity = ErrorSeverity.NO_ERROR;
    }
    
    @Override
    public int compareTo(ContentSpecId o) {
        return 0;
    }

    // TODO: can these move to a different class?
    public static ContentSpecId tryParse(String idString) {
        return tryParse(idString, ContentSpecGrade.UNSPECIFIED);
    }

    public static ContentSpecId tryParse(String idString, ContentSpecGrade grade) {
        ContentSpecId id = new ContentSpecId();

        if (idString.startsWith("SBAC-ELA-v1:")) {
            id.setParseFormat(ContentSpecIdFormat.ELA_V1);
            id.setSubject(ContentSpecSubject.ELA);

            String[] parts = idString.substring(12).split("\\|");

            String claim = "";
            String domain = "";
            String target = "";
            String parseGrade = null;

            if (parts.length > 0) {
                int dash = parts[0].indexOf('-');
                if (dash >= 0) {
                    claim = parts[0].substring(0, dash);
                    domain = parts[0].substring(dash + 1);
                } else {
                    claim = parts[0];
                }
            }

            if (parts.length > 1) {
                int dash = parts[1].indexOf('-');
                if (dash >= 0) {
                    target = parts[1].substring(0, dash);
                    parseGrade = parts[1].substring(dash + 1);
                } else {
                    target = parts[1];
                }
            }

            // The TryParse methods append to m_parseError if an error is found.
            if (parseGrade != null) {
                id.trySetGrade(parseGrade);
            } else {
                id.setGrade(grade);
            }

            id.trySetClaim(claim);
            id.trySetTarget(target);
            if (parts.length > 2) id.trySetCcss(parts[2]);
            id.trySetLegacyDomain(domain);
        } else if (idString.startsWith("SBAC-MA-v4:") || idString.startsWith("SBAC-MA-v5:")) {
            id.setParseFormat(idString.charAt(9) == '4' ? ContentSpecIdFormat.MATH_V4 : ContentSpecIdFormat.MATH_V5);
            id.setSubject(ContentSpecSubject.MATH);

            String[] parts = idString.substring(11).split("\\|");

            String target = "";
            String parseGrade = null;

            if (parts.length > 2) {
                int dash = parts[2].indexOf('-');
                if (dash >= 0) {
                    target = parts[2].substring(0, dash);
                    parseGrade = parts[2].substring(dash + 1);
                } else {
                    target = parts[2];
                }
            }

            if (parseGrade != null) {
                id.trySetGrade(parseGrade);
            } else {
                id.setGrade(grade);
            }
            if (parts.length > 0) id.trySetClaim(parts[0]);
            id.trySetTarget(target);
            if (parts.length > 4) id.trySetCcss(parts[4]);
            if (parts.length > 1) id.trySetLegacyDomain(parts[1]);
            if (parts.length > 3) id.validateEmphasis(parts[3]);
        } else if (idString.startsWith("SBAC-MA-v6:")) {
            id.setParseFormat(ContentSpecIdFormat.MATH_V6);
            id.setSubject(ContentSpecSubject.MATH);

            String[] parts = idString.substring(11).split("\\|");

            String target = "";
            String parseGrade = null;

            if (parts.length > 3)
            {
                int dash = parts[3].indexOf('-');
                if (dash >= 0)
                {
                    target = parts[3].substring(0, dash);
                    parseGrade = parts[3].substring(dash + 1);
                }
                else
                {
                    target = parts[3];
                }
            }

            if (parseGrade != null)
                id.trySetGrade(parseGrade);
            else
                id.setGrade(grade);

            if (parts.length > 0) id.trySetClaim(parts[0]);
            id.trySetTarget(target);
            if (parts.length > 1) id.trySetLegacyContentCategory(parts[1]);
            if (parts.length > 2) id.validateTargetSet(parts[2]);
        } else if (idString.startsWith("E") || idString.startsWith("M")) {
            // Enhanced format
            id.setParseFormat(ContentSpecIdFormat.ENHANCED);
            String[] parts = idString.split("\\.");

            id.trySetSubject(parts[0]);

            if (parts.length > 1) {
                if (!parts[1].startsWith("G")) {
                    id.appendParseError(ErrorSeverity.INVALID,
                            format("Expected grade in second part of ID but found '%s'.", parts[1]));
                }
                id.trySetGrade(parts[1].substring(1));
            }

            String domain = "";
            if (parts.length > 2) {
                if (!parts[2].startsWith("C")) {
                    id.appendParseError(ErrorSeverity.INVALID,
                            format("Expected claim in third part of ID but found '%s'.", parts[2]));
                }
                id.trySetClaim(parts[2].substring(1, 2));
                domain = parts[2].substring(2);
            }

            if (parts.length > 3) {
                if (!parts[3].startsWith("T")) {
                    id.appendParseError(ErrorSeverity.INVALID,
                            format("Expected target in third part of ID but found '%s'.", parts[3]));
                }
                id.trySetTarget(parts[3].substring(1));
            }

            if (parts.length > 4) {
                id.trySetCcss(Arrays.stream(parts)
                        .skip(4)
                        .collect(Collectors.joining(".")));
            }

            id.trySetDomain(domain);
        } else {
            id.appendParseError(ErrorSeverity.INVALID, format("Unknown ID format: '{%s}'.", idString));
        }

        return id;
    }

    private boolean trySetSubject(String subject) {
        switch (subject) {
            case "E":
                this.subject = ContentSpecSubject.ELA;
                return true;

            case "M":
                this.subject = ContentSpecSubject.MATH;
                return true;

            default:
                appendParseError(ErrorSeverity.INVALID,
                        format("Subject must be 'E' or 'M'; found '%s'", subject));
                return false;
        }
    }

    private boolean trySetGrade(final String gradeString) {
        this.grade = ContentSpecGrade.fromString(gradeString);

        if (this.grade == ContentSpecGrade.UNSPECIFIED) {
            appendParseError(ErrorSeverity.INVALID,
                    format("Grade must be integer in range 1-12 or 'HS'. Found '%s'.", gradeString));
            return false;
        }

        return true;
    }

    private boolean trySetClaim(String claim) {
        try {
            this.claim = ContentSpecClaim.valueOf("C" + claim);
            return true;
        } catch (IllegalArgumentException iae) {
            appendParseError(ErrorSeverity.INVALID,
                    format("Claim must be integer in range 1-4. Found '%s'.", claim));
        }

        return false;
    }

    private boolean trySetTarget(String target) {
        // So far, this is the only validation we do.
        if (isBlank(target)) {
            appendParseError(ErrorSeverity.INVALID, "Target must not be empty.");
            return false;
        }
        this.target = target;
        return true;
    }

    private boolean trySetCcss(String ccss)
    {
        // So far, this is the only validation we do.
        if (isBlank(ccss)) {
            appendParseError(ErrorSeverity.INVALID, "CCSS must not be empty.");
            return false;
        }
        this.ccss = ccss;
        return true;
    }

    private boolean trySetDomain(String domain) {
        if (isBlank(domain) || domain.equals(NOT_APPLICABLE)) {
            this.domain = null;
            return true;
        }

        // If no target has been set (typically a truncated new-format ID) then just keep the specified domain
        if (isBlank(target)) {
            this.domain = domain;
            // Note: no return here in order to match dot net impl.
        }

        // If Math claim 2-4 accept the inbound domain (it's from an associated Claim 1 ID)
        if (subject == ContentSpecSubject.MATH && claim != ContentSpecClaim.C1) {
            this.domain = domain;
            return true;
        }

        this.domain = null;
        String expectedDomain = getDomain();

        // If domain cannot be derived, then set the value
        if (isBlank(expectedDomain)) {
            this.domain = domain;
            return true;
        }

        // Otherwise, check that the value is what we expect it to be.
        if (!domain.equals(expectedDomain)) {
            appendParseError(ErrorSeverity.CORRECTED,
                    format("Incorrect domain in parsed ID. Found '%s', expected '%s'.",
                            domain, expectedDomain));
            return false;
        }

        return true;
    }

    private boolean trySetLegacyDomain(String legacyDomain) {
        if (isBlank(legacyDomain)|| legacyDomain.equals(NOT_APPLICABLE)) {
            this.domain = null;
            return true;
        }

        // If Math claim 2-4 accept the inbound domain (it's from an associated Claim 1 ID)
        if (subject == ContentSpecSubject.MATH && claim != ContentSpecClaim.C1) {
            this.domain = legacyDomain;
            return true;
        }

        this.domain = null;
        String expectedDomain = getLegacyDomain();

        // If domain cannot be derived, then set the value
        if (isBlank(expectedDomain)) {
            // Strip the extension if this is a hyphenated domain and grade is High School
            if (grade == ContentSpecGrade.GHS) {
                int dash = legacyDomain.indexOf('-');
                if (dash > 0 && ccss.startsWith(legacyDomain))
                {
                    this.domain = legacyDomain.substring(0, dash);
                    return true;
                }
            }

            this.domain = legacyDomain;
            return true;
        }

        // Otherwise, check the value
        if (!legacyDomain.equals(getLegacyDomain())) {
            appendParseError(ErrorSeverity.CORRECTED,
                    format("Invalid Domain in parsed ID. Found '%s', expected '%s'.",
                            legacyDomain, expectedDomain));
            return false;
        }

        return true;
    }

    private boolean trySetLegacyContentCategory(String legacyContentCategory) {
        if (subject == ContentSpecSubject.MATH && claim != ContentSpecClaim.C1) {
            this.domain = legacyContentCategory;
            return true;
        }

        this.domain = null;
        if (!StringUtils.equals(legacyContentCategory, getLegacyContentCategory())) {
            appendParseError(ErrorSeverity.CORRECTED,
                    format("Incorrect Content Category in parsed ID. Found '%s', expected '%s'.",
                            legacyContentCategory, getLegacyContentCategory()));
            return false;
        }

        return true;
    }

    private boolean validateTargetSet(String targetSet) {
        if (!StringUtils.equals(targetSet, getLegacyTargetSet())) {
            appendParseError(ErrorSeverity.CORRECTED,
                    format("Incorrect TargetSet in parsed ID. Found '%s', expected '%s'.",
                            targetSet, getLegacyTargetSet()));
            return false;
        }

        return true;
    }

    private boolean validateEmphasis(String emphasis) {
        if (!StringUtils.equals(emphasis, getLegacyEmphasis())) {
            // Only report the error if it's not due to a previous problem
            if (isBlank(parseError)) {
                appendParseError(ErrorSeverity.CORRECTED,
                        format("Incorrect emphasis in parsed ID. Found '%s', expected '%s'.",
                                emphasis, getLegacyEmphasis()));
            }

            return false;
        }

        return true;
    }

    private void appendParseError(ErrorSeverity severity, String error) {
        if (parseErrorSeverity.compareTo(severity) < 0) {
            parseErrorSeverity = severity;
        }
        if (isBlank(parseError)) {
            parseError = error;
        } else {
            parseError += (" | " + error);
        }
    }

    private void appendValidationError(ErrorSeverity severity, String error) {
        if (validationErrorSeverity.compareTo(severity) < 0) {
            validationErrorSeverity = severity;
        }
        if (isBlank(validationError)) {
            validationError = error;
        } else {
            validationError += (" | " + error);
        }
    }
}
