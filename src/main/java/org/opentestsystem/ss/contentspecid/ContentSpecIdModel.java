package org.opentestsystem.ss.contentspecid;


import lombok.Data;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.commons.lang3.StringUtils.isBlank;

/**
 * Created by Greg Charles on 11/8/18.
 */
@Data
public class ContentSpecIdModel {
    private static final int MAX_ELA_TARGET = 14;
    private static final int MAX_MATH_TARGET = 16;

    private static final Pattern ELA_TARGET_REGEX = Pattern.compile("C?(\\d+)[a-z]?");
    private static final Pattern MATH_TARGET_REGEX = Pattern.compile("T?([A-Z])");
    private static final int BAD_TARGET_VALUE = -1;

    private final DomainDeriver deriver;

    public ContentSpecIdModel() {
        deriver = new DomainDeriver();
    }

    public ContentSpecIdModel(DomainDeriver deriver) {
        this.deriver = deriver;
    }

    private ContentSpecSubject subject = ContentSpecSubject.UNSPECIFIED;
    private ContentSpecGrade grade = ContentSpecGrade.UNSPECIFIED;
    private ContentSpecClaim claim = ContentSpecClaim.UNSPECIFIED;
    private String target = "";
    private String ccss = ""; // Common core state standard
    private String domain = null;

    public boolean isMath() {
        return subject == ContentSpecSubject.MATH;
    }

    public boolean isEla() {
        return subject == ContentSpecSubject.ELA;
    }

    public String deriveDomain() {

        if (isEla()) {
            return deriver.deriveElaDomain(getGrade(), getClaim(), computeTargetValue());
        } else if (isMath()) {
            return deriver.deriveMathDomain(getGrade(), getClaim(), computeTargetValue());
        }

        return "";
    }

    private int computeTargetValue() {
        if (isBlank(target)) {
            return BAD_TARGET_VALUE;
        }

        Matcher matcher;

        switch (subject) {
            case ELA:
                matcher = ELA_TARGET_REGEX.matcher(target);
                if (matcher.find()) {
                    try {
                        int value = Integer.parseInt(matcher.group(1));
                        return (value < 1 || value > MAX_ELA_TARGET) ? BAD_TARGET_VALUE : value;
                    } catch (NumberFormatException nfe) {
                        // Fall through to return BAD_TARGET_VALUE
                    }
                }
            case MATH:
                matcher = MATH_TARGET_REGEX.matcher(target);
                if (matcher.find()) {
                    char targetChar = matcher.group(1).charAt(0);
                    int value = targetChar - 'A' + 1;
                    return (value < 1 || value > MAX_MATH_TARGET) ? BAD_TARGET_VALUE : value;
                }
            default:
                return BAD_TARGET_VALUE;
        }
    }
}
