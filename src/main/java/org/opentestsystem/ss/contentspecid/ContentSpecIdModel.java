package org.opentestsystem.ss.contentspecid;


import lombok.Data;

import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;

/**
 * Created by Greg Charles on 11/8/18.
 */
@Data
public class ContentSpecIdModel {
    private final DomainHandler domainHandler;
    private final EmphasisHandler emphasisHandler;
    private final TargetHandler targetHandler;

    private static final ContentSpecIdParser converter = new ContentSpecIdParser();

    public ContentSpecIdModel() {
        domainHandler = new DomainHandler();
        emphasisHandler = new EmphasisHandler();
        targetHandler = new TargetHandler();
    }

    public ContentSpecIdModel(DomainHandler domainHandler, EmphasisHandler emphasisComputer,
                              TargetHandler targetHandler) {
        this.domainHandler = domainHandler;
        this.emphasisHandler = emphasisComputer;
        this.targetHandler = targetHandler;
    }

    private ContentSpecSubject subject = ContentSpecSubject.UNSPECIFIED;
    private ContentSpecGrade grade = ContentSpecGrade.UNSPECIFIED;
    private ContentSpecClaim claim = ContentSpecClaim.UNSPECIFIED;
    private String target = "";
    private String ccss = ""; // Common core state standard
    private String domain = null;

    public boolean isMath() {
        return subject == ContentSpecSubject.MATH;
    }

    public boolean isEla() {
        return subject == ContentSpecSubject.ELA;
    }

    public String deriveDomain() {

        if (isEla()) {
            return domainHandler.deriveElaDomain(getGrade(), getClaim(), getTarget());
        } else if (isMath()) {
            return domainHandler.deriveMathDomain(getGrade(), getClaim(), getTarget());
        }

        return "";
    }

    public void setSubject(ContentSpecSubject subject) {
        this.subject = subject == null ? ContentSpecSubject.UNSPECIFIED : subject;
    }

    public void setGrade(ContentSpecGrade grade) {
        this.grade = grade == null ? ContentSpecGrade.UNSPECIFIED : grade;
    }

    public void setClaim(ContentSpecClaim claim) {
        this.claim = claim == null ? ContentSpecClaim.UNSPECIFIED : claim;
    }

    public ContentSpecEmphasis getEmphasis() {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return ContentSpecEmphasis.NOT_APPLICABLE;
        }

        return emphasisHandler.computeEmphasis(getGrade(), getTarget(), getCcss());
    }

    public int getTargetSet() {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return 0;
        }

        return targetHandler.getMathTargetSet(grade, target);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ContentSpecIdModel that = (ContentSpecIdModel) o;
        return subject == that.subject &&
                grade == that.grade &&
                claim == that.claim &&
                Objects.equals(target, that.target) &&
                Objects.equals(ccss, that.ccss) &&
                Objects.equals(domain, that.domain);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subject, grade, claim, target, ccss, domain);
    }

    /**
     * Format into enhanced format plus default legacy format for the subject.
     */
    @Override
    public String toString() {
        String enhanced = converter.format(this);
        String legacy = converter.formatLegacy(this);

        if (isNotBlank(legacy)) {
            return String.format("%s (%s)", enhanced, legacy);
        } else {
            return enhanced;
        }
    }
}
