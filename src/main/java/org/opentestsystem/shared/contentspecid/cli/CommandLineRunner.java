package org.opentestsystem.shared.contentspecid.cli;

import org.opentestsystem.shared.contentspecid.ContentSpecId;
import org.opentestsystem.shared.contentspecid.ContentSpecIdConverter;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.ValidationException;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ELA_V1;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ENHANCED;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V4;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V5;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V6;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject.MATH;


/**
 * Command line API for test Content Spec ID library.
 *
 * See usage() method below or README.md for usage information.
 */
public class CommandLineRunner {
    public static void main(final String[] args) {
        boolean verbose = false;

        if (args.length == 1 && isHelpSwitch(args[0])) {
            usage();
        }

        String [] parts = args;
        if (parts.length > 0) {
            if (isVerboseSwitch(parts[0])) {
                verbose = true;
                parts = Arrays.copyOfRange(parts, 1, parts.length);
            } else if (isVerboseSwitch(parts[parts.length-1])) {
                verbose = true;
                parts = Arrays.copyOfRange(parts, 0, parts.length-1);
            }
        }

        if (parts.length == 0) {
            Scanner input = new Scanner(System.in);
            while (input.hasNext()) {
                String line = input.nextLine();
                if (isBlank(line)) {
                    continue;
                }
                parts = line.split(" ");
                if (parts.length == 1 || parts.length == 2) {
                    convertAndOutput(parts, verbose);
                } else {
                    System.out.println("Error bad input");
                }
            }
        } else if (parts.length == 1  || parts.length == 2) {
            convertAndOutput(parts, verbose);
        } else {
            usage();
        }
    }

    private static boolean isHelpSwitch(final String s) {
        if (s == null) {
            return false;
        }
        switch (s.trim()) {
            case "-h":
            case "--help":
            case "--usage":
                return true;
            default:
                return false;
        }
    }

    private static boolean isVerboseSwitch(final String s) {
        if (s == null) {
            return false;
        }

        switch (s.trim()) {
            case "-v":
            case "--verbose":
                return true;
            default:
                return false;
        }
    }

    private static void convertAndOutput(String [] parts, boolean verbose) {

        ContentSpecIdConverter converter = new ContentSpecIdConverter();
        ContentSpecFormat inputFormat = ContentSpecFormat.UNKNOWN;

        try {
            String csid;
            ContentSpecGrade defaultGrade;
            if (parts.length == 1) {
                csid = parts[0];
                defaultGrade = ContentSpecGrade.UNSPECIFIED;
            } else {
                csid = parts[1];
                defaultGrade = ContentSpecGrade.fromString(parts[0]);
                if (defaultGrade == ContentSpecGrade.UNSPECIFIED) {
                    throw new ValidationException(ErrorSeverity.INVALID,
                            "Cannot convert string to default grade: " + parts[0]);
                }
            }

            inputFormat = converter.getFormatType(csid);
            ContentSpecId id = converter.parse(csid, defaultGrade);
            List<ContentSpecFormat> outputFormats = getOutputFormats(inputFormat, id.getSubject());

            StringBuilder sb = new StringBuilder();
            for (ContentSpecFormat format : outputFormats) {
                String outputComponent = converter.format(id, format);
                if (sb.length() != 0) {
                    sb.append(", ");
                }
                sb.append(outputComponent);
            }

            String output = sb.toString();

            if (verbose) {
                String input = parts.length == 1 ? parts[0] : parts[0] + " " + parts[1];
                System.out.println("Input: " + input +
                        " (Format: " + toString(inputFormat)  + ") \u2192 Output: " + output);
            } else {
                System.out.println(output);
            }
        } catch (ValidationException e) {
            if (verbose) {
                String input = parts.length == 1 ? parts[0] : parts[0] + " " + parts[1];
                System.out.println("Input: " + input + ", " +
                        "(Format: " + toString(inputFormat) + ") \u2192 Validation Exception: "
                        + e.getErrorDescription());
            } else {
                System.out.println("Validation Exception: " + e.getErrorDescription());
            }
        }
    }

    private static String toString(ContentSpecFormat format) {
        if (format.isLegacy()) {
            return "Legacy " + format.name();
        } else if (format.isEnhanced()) {
            return "Enhanced";
        } else {
            return "Unknown";
        }
    }

    private static List<ContentSpecFormat> getOutputFormats(ContentSpecFormat inputFormat, ContentSpecSubject subject) {
        if (inputFormat.isEnhanced()) {
            if (subject == MATH) {
                return Arrays.asList(MATH_V4, MATH_V5, MATH_V6);
            } else {
                return Collections.singletonList(ELA_V1);
            }
        } else {
            return Collections.singletonList(ENHANCED);
        }
    }

    private static void usage() {
        String jarName = new java.io.File(CommandLineRunner.class.getProtectionDomain()
                .getCodeSource()
                .getLocation()
                .getPath())
                .getName();
        if (jarName.equals("main")) {
            jarName = "jarfile.jar";
        }

        System.out.println("USAGE:");
        System.out.println("java -jar " + jarName + " -h|--help|--usage : prints this usage information");
        System.out.println("java -jar " + jarName +
                " [-v|--verbose] [default-grade] content-spec-id : converts given content spec id and output to stdout");
        System.out.println("java -jar " + jarName +
                " [-v|--verbose] : reads from stdin and converts content spec id on each line to stdout. Ctrl-C to quit.");
        System.out.println("java -jar " + jarName +
                " [-v|--verbose] < /path/to/inputfile: reads from input file and converts content spec id on each line to stdout.");
        System.out.println();
        System.out.println("Note: when a legacy ID is provided directly from the command line, it must be " +
                "surrounded by quotes (single or double), because the pipe character (|) is significant to the shell.");
        System.exit(0);
    }
}
