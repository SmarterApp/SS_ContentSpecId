package org.opentestsystem.shared.contentspecid;

import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.DomainCode;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.IdParseException;
import org.opentestsystem.shared.contentspecid.exceptions.IdValidationException;
import org.opentestsystem.shared.contentspecid.legacy.LegacyContentSpecIdConverter;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;

import javax.annotation.Nonnull;
import java.util.Arrays;
import java.util.stream.Collectors;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ENHANCED;

/**
 * ContentSpecIdConverter between ID strings and objects. It has parse methods that take strings in the
 * enhanced CSID format type or any of the four legacy format types and turn them into ContentSpecId object.
 * It also has format methods to convert the objects back into strings.
 *
 * <p>
 *     The content specification syntax defines an enhanced format and four legacy formats for specifying
 *     a content specification as a string. Examples of each format are shown below:
 *     <ul>
 *         <li>Enhanced examples for ELA and Math: E.G3.C1RI.T11.RI.3.9, M.G8.C1EE.TB.8.EE.A.2</li>
 *         <li>Legacy ELA v1 example: SBAC-ELA-v1:1-IT|9-3|3.RI.2</li>
 *         <li>Legacy Math v4 example: SBAC-MA-v4:1|G|K-3|a/s|3.G.2</li>
 *         <li>Legacy Math v5 example: SBAC-MA-v5:1|OA|A-3|m|3.OA.2</li>
 *         <li>Legacy Math v6 example:  SBAC-MA-v6:1|P|TS02|D-3</li>
 *     </ul>
 *     @see <a href="http://www.smarterapp.org/documents/ContentSpecificationIdFormats.pdf">Content Specification ID Formats (PDF)</a>
 * </p>
 *
 */
public class ContentSpecIdConverter {
    // Lazy loaded via getLegacyConverter()
    private LegacyContentSpecIdConverter legacyConverter = null;
    protected ContentSpecIdValidator validator = new ContentSpecIdValidator();

    protected static final String NOT_APPLICABLE = "NA";

    /**
     * Gets the format type for csid content spec ID.
     * The csid string can be in enhanced format or any of four legacy formats. (See class comment.)

     * @param csid string in content spec ID syntax.
     * @return the format type of the id
     * @throws IdParseException if the csid doesn't conform to any supported syntax
     */
    public ContentSpecFormat getFormatType(@Nonnull final String csid) throws IdParseException {
        String idString = cleanInput(csid);

        if (idString.startsWith("E") || idString.startsWith("M")) {
            return ENHANCED;
        } else {
            return getLegacyConverter().getFormatType(idString);
        }
    }

    /**
     * Parses an input string in content spec ID format to a ContentSpecId pojo.
     * @param csid string in content spec ID syntax.
     * @return ContentSpecId object equivalent of the given string
     * @throws IdParseException for invalid csid input that cannot be parsed
     */
    @SuppressWarnings("WeakerAccess")
    public ContentSpecId parse(String csid) throws IdParseException {
        return parse(csid, ContentSpecGrade.UNSPECIFIED);
    }


    /**
     * Parses an input string with the given default grade in content spec ID format to a ContentSpecId pojo.
     * This method is only needed for legacy formats, which sometime omit the grade level from the ID.
     *
     * @param csid string in content spec ID syntax.
     * @return ContentSpecId object equivalent of the given string
     * @throws IdParseException for invalid csid input that cannot be parsed
     */
    public ContentSpecId parse(String csid, ContentSpecGrade defaultGrade) throws IdParseException {
        if (getFormatType(csid).isLegacy()) {
            return getLegacyConverter().parse(csid, defaultGrade);
        }

        final String idString = cleanInput(csid);

        String[] parts = idString.split("\\.");

        if (parts.length < 2) {
            throw new IdParseException(ErrorSeverity.INVALID, "ID must contain at least subject and grade");
        }

        ContentSpecSubject subject = convertSubject(parts[0]);
        String gradeString = parts[1];

        ContentSpecIdBuilder builder =
                ContentSpecIdBuilder.getBuilder(subject, ContentSpecGrade.fromString(gradeString));

        if (parts.length > 2) {
            if (parts[2].length() <= 2) {
                builder.claim(parts[2])
                        .domain("");
            } else {
                builder.claim(parts[2].substring(0, 2))
                        .domain(parts[2].substring(2));
            }
        }

        if (parts.length > 3) {
            builder.target(parts[3]);
            if (parts[3] != null && parts[3].length() > 1 && parts[3].startsWith("T")) {
                // Target string is all characters following the "T" prefix
                builder.target(parts[3].substring(1));
            } else {
                throw new IdParseException(ErrorSeverity.INVALID,
                        String.format("Expected non-empty target in ID but found '%s'.", parts[3]));
            }
        }

        if (parts.length > 4) {
            String ccss = Arrays.stream(parts)
                    .skip(4)
                    .collect(Collectors.joining("."));
            if (isBlank(ccss)) {
                throw new IdParseException(ErrorSeverity.INVALID, "CCSS must not be empty.");
            }
            builder.ccss(ccss);
        }

        return builder.build();
    }

    /**
     * Formats the given ContentSpecId pojo into a content spec ID string in enhanced format.
     *
     * @param id the content spec ID object
     * @return an enhanced format CSID string
     * @throws IdValidationException when the pojo does not have enough information to produce a valid CSID string.
     */
    public String format(ContentSpecId id) throws IdValidationException {
        return format(id, ENHANCED);
    }

    public String format(ContentSpecId id, ContentSpecFormat format) throws IdValidationException {
        validator.validateFor(id, format);

        if (!(id.isEla() || id.isMath())) {
            return "";
        }

        if (format.isUnknown()) {
            return "";
        }

        if (format.isLegacy()) {
            return getLegacyConverter().format(id, format);
        }

        StringBuilder sb = new StringBuilder();
        sb.append(id.isEla() ? 'E' : 'M');

        if (id.getGrade() != ContentSpecGrade.UNSPECIFIED) {
            sb.append('.').append(id.getGrade().getValue()); // Includes the 'G' prefix

            if (id.getClaim() != ContentSpecClaim.UNSPECIFIED) {
                sb.append('.').append(id.getClaim().getValue()); // Includes the 'C' prefix

                // Either Conceptual category (High School) or Domain (Grades 3-8)
                DomainCode domain = DomainCode.fromString(id.getDomain());
                if (domain != DomainCode.NA) {
                    sb.append(domain == DomainCode.UNK ? id.getDomain() : domain.getValue());
                }

                if (isNotBlank(id.getTarget())) {
                    sb.append(".T").append(id.getTarget());

                    if (isNotBlank(id.getCcss())) {
                        sb.append('.').append(id.getCcss());
                    }
                }
            }
        }

        return sb.toString();
    }

    @SuppressWarnings("WeakerAccess")
    public String formatLegacy(ContentSpecId id) throws IdValidationException {
        return getLegacyConverter().format(id);
    }

    private ContentSpecSubject convertSubject(final String subject) throws IdParseException {
        switch (subject) {
            case "E":
                return ContentSpecSubject.ELA;
            case "M":
                return ContentSpecSubject.MATH;
        }

        throw new IdParseException(ErrorSeverity.INVALID,
                String.format("Subject must be 'E' or 'M'; found '%s'", subject));
    }

    protected static String cleanInput(final String input) throws IdParseException {
        if (isBlank(input)) {
            throw new IdParseException(ErrorSeverity.INVALID, "Cannot process a blank ID");
        }

        return input.trim();
    }

    private LegacyContentSpecIdConverter getLegacyConverter() {
        if (legacyConverter == null) {
            legacyConverter = new LegacyContentSpecIdConverter();
        }

        return legacyConverter;
    }
}
