package org.opentestsystem.shared.contentspecid.legacy;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.shared.contentspecid.enums.DomainCode;
import org.opentestsystem.shared.contentspecid.exceptions.IdParseException;
import org.opentestsystem.shared.contentspecid.exceptions.IdValidationException;
import org.opentestsystem.shared.contentspecid.ContentSpecId;
import org.opentestsystem.shared.contentspecid.ContentSpecIdConverter;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecEmphasis;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;

import javax.annotation.Nonnull;
import javax.annotation.RegEx;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import static org.apache.commons.lang3.StringUtils.isBlank;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ELA_V1;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V4;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V5;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V6;
import static org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity.CORRECTED;
import static org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity.INVALID;

/**
 * Created by Greg Charles on 11/9/18.
 */
public class LegacyContentSpecIdConverter extends ContentSpecIdConverter {
    private static final String LEGACY_ELA_MARKER = "SBAC-ELA-v1:";
    private static final String LEGACY_MATH_MARKER = "SBAC-MA-v";

    private static final int LEGACY_ELA_PREFIX_LENGTH = LEGACY_ELA_MARKER.length();
    private static final int LEGACY_MATH_PREFIX_LENGTH = LEGACY_MATH_MARKER.length() + 2;

    private static final String MAIN = "m";
    private static final String ADDITIONAL_SUPPORTING = "a/s";

    private static final String PRIORITY_CLUSTER = "P";
    private static final String SUPPORTING_CLUSTER = "S";

    private static final ContentSpecFormat DEFAULT_ELA_FORMAT = ContentSpecFormat.ELA_V1;
    private static final ContentSpecFormat DEFAULT_MATH_FORMAT = ContentSpecFormat.MATH_V4;

    @RegEx
    private static final Pattern LEGACY_CCSS_REGEX = Pattern.compile("((\\S*)-[^.]*)\\.\\S*");

    @Override
    public ContentSpecFormat getFormatType(@Nonnull final String input) throws IdParseException {
        String idString = cleanInput(input);

        if (idString.startsWith(LEGACY_ELA_MARKER)) {
            return ELA_V1;
        }

        if (idString.startsWith(LEGACY_MATH_MARKER)) {
            switch (idString.charAt(LEGACY_MATH_MARKER.length())) {
                case '4':
                    return MATH_V4;
                case '5':
                    return MATH_V5;
                case '6':
                    return MATH_V6;
            }
        }

        throw new IdParseException(INVALID, String.format("Unknown ID format: '{%s}'.", idString));
    }

    @Override
    public ContentSpecId parse(String input, ContentSpecGrade defaultGrade) throws IdParseException {
        final ContentSpecFormat format = getFormatType(input);
        final String idString = cleanInput(input);
        final ContentSpecId id = new ContentSpecId();

        int prefixLength;
        if (format == ContentSpecFormat.ELA_V1) {
            prefixLength = LEGACY_ELA_PREFIX_LENGTH;
            id.setSubject(ContentSpecSubject.ELA);
        } else {
            prefixLength = LEGACY_MATH_PREFIX_LENGTH;
            id.setSubject(ContentSpecSubject.MATH);
        }

        final String[] parts = idString.substring(prefixLength).split("\\|");

        switch (format) {
            case ELA_V1:
                String claim = "";
                String domain = "";
                String target = "";
                String parseGrade = null;

                if (parts.length > 0) {
                    int dash = parts[0].indexOf('-');
                    if (dash >= 0) {
                        claim = parts[0].substring(0, dash);
                        domain = parts[0].substring(dash + 1);
                    } else {
                        claim = parts[0];
                    }
                }

                if (parts.length > 1) {
                    int dash = parts[1].indexOf('-');
                    if (dash >= 0) {
                        target = parts[1].substring(0, dash);
                        parseGrade = parts[1].substring(dash + 1);
                    } else {
                        target = parts[1];
                    }
                }

                if (parseGrade != null) {
                    id.setGrade(convertGrade(parseGrade));
                } else {
                    id.setGrade(defaultGrade);
                }

                id.setClaim(convertClaim(claim));
                id.setTarget(convertTarget(target));

                if (parts.length > 2) {
                    id.setCcss(convertCcss(parts[2]));
                }

                id.setDomain(DomainCode.fromString(convertDomain(domain, getLegacyDomain(id), id.deriveDomain(),
                        false, id.getGrade(), id.getCcss())));
                break;

            case MATH_V4:
            case MATH_V5:
                target = "";
                parseGrade = null;

                if (parts.length > 2) {
                    int dash = parts[2].indexOf('-');
                    if (dash >= 0) {
                        target = parts[2].substring(0, dash);
                        parseGrade = parts[2].substring(dash + 1);
                    } else {
                        target = parts[2];
                    }
                }

                if (parseGrade != null) {
                    id.setGrade(convertGrade(parseGrade));
                } else {
                    id.setGrade(defaultGrade);
                }

                if (parts.length > 0) {
                    id.setClaim(convertClaim(parts[0]));
                }

                id.setTarget(convertTarget(target));

                if (parts.length > 4) {
                    id.setCcss(convertCcss(parts[4]));
                }

                if (parts.length > 1) {
                    boolean isMathNonPrimaryClaim = (id.getClaim() != ContentSpecClaim.C1);
                    id.setDomain(DomainCode.fromString(convertDomain(parts[1], getLegacyDomain(id), id.deriveDomain(),
                            isMathNonPrimaryClaim, id.getGrade(), id.getCcss())));
                }
                if (parts.length > 3) {
                    validateEmphasis(parts[3], id.getEmphasis());
                }
                break;

            case MATH_V6:
                target = "";
                parseGrade = null;

                if (parts.length > 3) {
                    int dash = parts[3].indexOf('-');
                    if (dash >= 0) {
                        target = parts[3].substring(0, dash);
                        parseGrade = parts[3].substring(dash + 1);
                    } else {
                        target = parts[3];
                    }
                }

                if (parseGrade != null) {
                    id.setGrade(convertGrade(parseGrade));
                } else {
                    id.setGrade(defaultGrade);
                }

                if (parts.length > 0) {
                    id.setClaim(convertClaim(parts[0]));
                }
                id.setTarget(convertTarget(target));
                if (parts.length > 1) {
                    String derivedDomain = id.deriveDomain();
                    String expedtedContentCategory = getLegacyContentCategory(id);

                    domain = convertMathContentCategoryToDomain(parts[1], id.getClaim(),
                            derivedDomain, expedtedContentCategory);
                    id.setDomain(DomainCode.fromString(domain));
                }
                if (parts.length > 2) {
                    validateTargetSet(parts[2], convertTargetSetToLegacy(id.getTargetSet()));
                }
                break;

            default:
                throw new IdParseException(INVALID, String.format("Unknown ID format: '{%s}'.", idString));
        }

        return id;
    }

    @Override
    public String format(ContentSpecId id) throws IdValidationException {
        if (id.isMath()) {
            return format(id, DEFAULT_MATH_FORMAT);
        }
        if (id.isEla()) {
            return format(id, DEFAULT_ELA_FORMAT);
        }

        return "";
    }

    @Override
    public String format(ContentSpecId id, ContentSpecFormat format) throws IdValidationException {
        id.validateFor(format);

        String idString;

        switch (format) {
            case ENHANCED:
                throw new IllegalArgumentException("Legacy Formatter cannot handle ENHANCED format");

            case ELA_V1:
                idString = String.format("SBAC-ELA-v1:%s-%s|%s-%s",
                        id.getClaim().getValue(), getLegacyDomain(id), id.getTarget(), id.getGrade().getValue());
                if (isNotBlank(id.getCcss())) {
                    idString += ("|" + id.getCcss());
                }
                break;

            case MATH_V4:
            case MATH_V5:
                idString = String.format("SBAC-MA-v%d:%s|%s|%s-%s|%s",
                        format.getValue(), id.getClaim().getValue(), getLegacyDomain(id),
                        id.getTarget(), id.getGrade().getValue(), convertToLegacyEmphasis(id.getEmphasis()));

                if (isNotBlank(id.getCcss())) {
                    idString += ("|" + id.getCcss());
                }
                break;

            case MATH_V6:
                idString = String.format("SBAC-MA-v6:%s|%s|%s|%s-%s",
                        id.getClaim().getValue(), getLegacyContentCategory(id),
                        convertTargetSetToLegacy(id.getTargetSet()), id.getTarget(),
                        id.getGrade().getValue());
                break;

            default:
                idString = "";
        }

        return idString;
    }

    private String convertTargetSetToLegacy(int ts) {
        return (ts == 0) ? NOT_APPLICABLE : String.format("TS%02d", ts);
    }

    private void validateEmphasis(String emphasis, ContentSpecEmphasis expectedEmphasis) throws IdParseException {
        if (!StringUtils.equals(emphasis, convertToLegacyEmphasis(expectedEmphasis))) {
            throw new IdParseException(CORRECTED,
                        String.format("Incorrect emphasis in parsed ID. Found '%s', expected '%s'.",
                                emphasis, convertToLegacyEmphasis(expectedEmphasis)));
        }
    }

    private String convertDomain(String domain, String canonicalDomain, String derivedDomain,
                                 boolean isMathNonPrimaryClaim, ContentSpecGrade grade, String ccss)
            throws IdParseException {
        if (isBlank(domain) || domain.equals(NOT_APPLICABLE)) {
            return derivedDomain;
        }

        if (isMathNonPrimaryClaim) {
            return domain;
        }

        // If domain cannot be derived, then set the value
        if (isBlank(canonicalDomain)) {
            // Strip the extension if this is a hyphenated domain and grade is High School
            if (grade == ContentSpecGrade.GHS) {
                int dash = domain.indexOf('-');
                if (dash > 0 && ccss.startsWith(domain)) {
                    return domain.substring(0, dash);
                }
            }

            return domain;
        }

        // Otherwise, check that the value is what we expect it to be.
        if (!domain.equals(canonicalDomain)) {
            throw new IdParseException(CORRECTED,
                    String.format("Incorrect domain in parsed ID. Found '%s', expected '%s'.",
                            domain, canonicalDomain));
        }

        return derivedDomain;
    }

    private String convertMathContentCategoryToDomain(String contentCategory, ContentSpecClaim claim,
                                                      String derivedDomain, String expectedContentCategory)
                        throws IdParseException {
        if (claim != ContentSpecClaim.C1) {
            return contentCategory;
        }

        if (!StringUtils.equals(contentCategory, expectedContentCategory)) {
            throw new IdParseException(CORRECTED,
                    String.format("Incorrect Content Category in parsed ID. Found '%s', expected '%s'.",
                            contentCategory, expectedContentCategory));
        }

        return derivedDomain;
    }

    private String getLegacyDomain(ContentSpecId id) {
        String domain = (id.getDomain() == null) ? id.deriveDomain() : id.getDomain().getLegacyValue();

        // TODO: check comments against spec. Is it all Claim 1, or just Math?
        // If Claim 1 and high school, and the domain matches the the beginning
        // of the ccss then return the extended domain from the CCSS standard.
        // For example: if (Domain == "G" and CCSS == "G-SRT.6") return "G-SRT";
        if (id.isMath() && id.getGrade() == ContentSpecGrade.GHS) {
            Matcher matcher = LEGACY_CCSS_REGEX.matcher(id.getCcss());
            if (matcher.find()) {
                if (matcher.group(2).equals(domain)) {
                    domain = matcher.group(1);
                }
            }
        } else if (id.isEla()) {
            // Translate ELA domains
            switch (domain) {
                case "RL":
                    domain = "LT"; // Reading Literary Texts
                    break;
                case "RI":
                    domain = "IT"; // Reading Informational Texts
                    break;
                case "WN":
                case "WI":
                case "WO":
                case "WE":
                case "WA":
                case "WG":
                    domain = "W"; // Writing
                    break;
                case "SL":
                    domain = "L"; // Listening
                    break;
                case "R":
                    domain = "CR"; // Research & Inquiry - Communicating Reasoning
                    break;
            }
        }

        return domain;
    }

    private String getLegacyContentCategory(ContentSpecId id) {
        if (!id.isMath()) {
            return NOT_APPLICABLE;
        }

        if (id.getClaim() == ContentSpecClaim.C1) {
            switch (id.getEmphasis()) {
                case AS:
                    return SUPPORTING_CLUSTER;
                case M:
                    return PRIORITY_CLUSTER;
                default:
                    return NOT_APPLICABLE;
            }
        }

        if (id.getDomain() != null) {
            return id.getDomain().getLegacyValue();
        }

        return NOT_APPLICABLE;
    }

    private void validateTargetSet(String targetSet, String expectedTargetSet) throws IdParseException {
        if (!StringUtils.equals(targetSet, expectedTargetSet)) {
            throw new IdParseException(CORRECTED,
                    String.format("Incorrect TargetSet in parsed ID. Found '%s', expected '%s'.",
                            targetSet, expectedTargetSet));
        }
    }

    @Override
    protected String convertTarget(String targetString) {
        return targetString;
    }

    private String convertToLegacyEmphasis(ContentSpecEmphasis emphasis) {
        switch(emphasis) {
            case M:
                return MAIN;
            case AS:
                return ADDITIONAL_SUPPORTING;
            default:
                return NOT_APPLICABLE;
        }
    }
}