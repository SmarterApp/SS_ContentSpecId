package org.opentestsystem.shared.contentspecid.legacy;

import org.opentestsystem.shared.contentspecid.ContentSpecId;
import org.opentestsystem.shared.contentspecid.ContentSpecIdBuilder;
import org.opentestsystem.shared.contentspecid.ContentSpecIdConverter;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.enums.DomainCode;
import org.opentestsystem.shared.contentspecid.exceptions.IdParseException;
import org.opentestsystem.shared.contentspecid.exceptions.IdValidationException;

import javax.annotation.Nonnull;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ELA_V1;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V4;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V5;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V6;
import static org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity.INVALID;
import static org.opentestsystem.shared.contentspecid.handlers.DomainHandler.formatDashedDomain;

/**
 * Created by Greg Charles on 11/9/18.
 */
public class LegacyContentSpecIdConverter extends ContentSpecIdConverter {
    private static final String LEGACY_ELA_MARKER = "SBAC-ELA-v1:";
    private static final String LEGACY_MATH_MARKER = "SBAC-MA-v";

    private static final int LEGACY_ELA_PREFIX_LENGTH = LEGACY_ELA_MARKER.length();
    private static final int LEGACY_MATH_PREFIX_LENGTH = LEGACY_MATH_MARKER.length() + 2;

    private static final ContentSpecFormat DEFAULT_ELA_FORMAT = ContentSpecFormat.ELA_V1;
    private static final ContentSpecFormat DEFAULT_MATH_FORMAT = ContentSpecFormat.MATH_V4;

    @Override
    public ContentSpecFormat getFormatType(@Nonnull final String input) throws IdParseException {
        String idString = cleanInput(input);

        if (idString.startsWith(LEGACY_ELA_MARKER)) {
            return ELA_V1;
        }

        if (idString.startsWith(LEGACY_MATH_MARKER)) {
            switch (idString.charAt(LEGACY_MATH_MARKER.length())) {
                case '4':
                    return MATH_V4;
                case '5':
                    return MATH_V5;
                case '6':
                    return MATH_V6;
            }
        }

        throw new IdParseException(INVALID, String.format("Unknown ID format: '{%s}'.", idString));
    }

    @Override
    public ContentSpecId parse(String input, ContentSpecGrade defaultGrade) throws IdParseException {
        final ContentSpecFormat format = getFormatType(input);
        final String idString = cleanInput(input);

        int prefixLength;
        ContentSpecSubject subject;

        if (format == ContentSpecFormat.ELA_V1) {
            prefixLength = LEGACY_ELA_PREFIX_LENGTH;
            subject = ContentSpecSubject.ELA;
        } else {
            prefixLength = LEGACY_MATH_PREFIX_LENGTH;
            subject = ContentSpecSubject.MATH;
        }

        final String[] parts = idString.substring(prefixLength).split("\\|");

        ContentSpecGrade grade = defaultGrade;
        String parseGrade = parseGrade(format, parts);
        if (ContentSpecGrade.fromString(parseGrade) != ContentSpecGrade.UNSPECIFIED) {
            grade = ContentSpecGrade.fromString(parseGrade);
        }

        ContentSpecIdBuilder builder = ContentSpecIdBuilder.getBuilder(subject, grade);

        switch (format) {
            case ELA_V1:
                if (parts.length > 0) {
                    int dash = parts[0].indexOf('-');
                    if (dash >= 0) {
                        builder.claim(parts[0].substring(0, dash));
                        builder.domain(parts[0].substring(dash + 1));
                    } else {
                        builder.claim(parts[0]);
                    }
                }

                if (parts.length > 1) {
                    int dash = parts[1].indexOf('-');
                    if (dash >= 0) {
                        builder.target(parts[1].substring(0, dash));
                    } else {
                        builder.target(parts[1]);
                    }
                }

                if (parts.length > 2) {
                    builder.ccss(parts[2]);
                }

                break;

            case MATH_V4:
            case MATH_V5:
                if (parts.length > 0) {
                    builder.claim(parts[0]);
                }

                if (parts.length > 1) {
                    builder.domain(parts[1]);
                }

                if (parts.length > 2) {
                    int dash = parts[2].indexOf('-');
                    if (dash >= 0) {
                        builder.target(parts[2].substring(0, dash));
                    } else {
                        builder.target(parts[2]);
                    }
                }

                if (parts.length > 3) {
                    builder.emphasis(parts[3]);
                }

                if (parts.length > 4) {
                    builder.ccss(parts[4]);
                }

                break;

            case MATH_V6:
                String claim = "";
                if (parts.length > 0) {
                    claim = parts[0];
                    builder.claim(claim);
                }

                if (parts.length > 1) {
                    if (claim.equals("1")) {
                        builder.contentCategory(parts[1]);
                    } else {
                        builder.domain(parts[1]);
                    }
                }

//                if (parts.length > 2) {
//                    // TODO: make this settable?
//                    builder.targetSet(parts[2]);
//                }

                if (parts.length > 3) {
                    int dash = parts[3].indexOf('-');
                    if (dash >= 0) {
                        builder.target(parts[3].substring(0, dash));
                    } else {
                        builder.target(parts[3]);
                    }
                }

                break;

            default:
                throw new IdParseException(INVALID, String.format("Unknown ID format: '{%s}'.", idString));
        }

        return builder.build();
    }

    private String parseGrade(ContentSpecFormat format, String[] parts) {
        int part = -1;
        switch (format) {
            case ELA_V1:
                part = 1;
                break;
            case MATH_V4:
            case MATH_V5:
                part = 2;
                break;
            case MATH_V6:
                part = 3;
                break;
        }

        if (part >= 0 && part < parts.length) {
            int dash = parts[part].indexOf('-');
            if (dash >= 0) {
                return parts[part].substring(dash + 1);
            }
        }

        return null;
    }

    @Override
    public String format(ContentSpecId id) throws IdValidationException {
        if (id.isMath()) {
            return format(id, DEFAULT_MATH_FORMAT);
        }
        if (id.isEla()) {
            return format(id, DEFAULT_ELA_FORMAT);
        }

        return "";
    }

    @Override
    public String format(ContentSpecId id, ContentSpecFormat format) throws IdValidationException {
        validator.validateFor(id, format);

        String idString;

        switch (format) {
            case ENHANCED:
                throw new IllegalArgumentException("Legacy Formatter cannot handle ENHANCED format");

            case ELA_V1:
                idString = String.format("SBAC-ELA-v1:%s-%s|%s-%s",
                        id.getClaim().getLegacyValue(),
                        getLegacyDomain(id.getDomain()),
                        id.getTarget(),
                        id.getGrade().getLegacyValue());

                if (isNotBlank(id.getCcss())) {
                    idString += ("|" + id.getCcss());
                }

                break;

            case MATH_V4:
            case MATH_V5:
                idString = String.format("SBAC-MA-v%d:%s|%s|%s-%s|%s",
                        format.getValue(),
                        id.getClaim().getLegacyValue(),
                        formatDashedDomain(getLegacyDomain(id.getDomain()), id.getGrade(), id.getCcss()),
                        id.getTarget(),
                        id.getGrade().getLegacyValue(),
                        id.getEmphasis().getValue());

                if (isNotBlank(id.getCcss())) {
                    idString += ("|" + id.getCcss());
                }

                break;

            case MATH_V6:
                idString = String.format("SBAC-MA-v6:%s|%s|%s|%s-%s",
                        id.getClaim().getLegacyValue(),
                        id.getContentCategory(),
                        formatTargetSet(id.getTargetSet()),
                        id.getTarget(),
                        id.getGrade().getLegacyValue());
                break;

            default:
                idString = "";
        }

        return idString;
    }

    private String formatTargetSet(int ts) {
        return (ts == 0) ? NOT_APPLICABLE : String.format("TS%02d", ts);
    }

    private String getLegacyDomain(String domain) {
        DomainCode code = DomainCode.fromString(domain);
        if (code == DomainCode.UNK) {
            return domain;
        }

        return code.getLegacyValue();
    }
}