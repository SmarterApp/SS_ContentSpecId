package org.opentestsystem.shared.contentspecid;

import org.apache.commons.lang3.StringUtils;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.enums.DomainCode;
import org.opentestsystem.shared.contentspecid.enums.Emphasis;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.IdParseException;
import org.opentestsystem.shared.contentspecid.handlers.DomainHandler;
import org.opentestsystem.shared.contentspecid.handlers.EmphasisHandler;
import org.opentestsystem.shared.contentspecid.handlers.TargetHandler;

import static org.apache.commons.lang3.StringUtils.defaultString;
import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.trimToEmpty;
import static org.apache.logging.log4j.util.Strings.isBlank;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject.MATH;
import static org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity.CORRECTED;
import static org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity.INVALID;


/**
 * Builds a ContentSpecId object up from its component parts.
 */
public class ContentSpecIdBuilder {

    private static final String NOT_APPLICABLE = "NA";
    private static final String PRIORITY_CLUSTER = "P";
    private static final String SUPPORTING_CLUSTER = "S";

    private final ContentSpecSubject subject;
    private final ContentSpecGrade grade;
    private String claim;
    private String target = "";
    private String ccss = "";
    private String domain = DomainCode.UNK.getValue();
    private String emphasis = "";
    private String contentCategory = "";
    
    private final DomainHandler domainHandler = new DomainHandler();
    private final EmphasisHandler emphasisHandler = new EmphasisHandler();
    private final TargetHandler targetHandler = new TargetHandler();

    public static ContentSpecIdBuilder getBuilder(ContentSpecSubject subject, ContentSpecGrade grade) {
        return new ContentSpecIdBuilder(subject, grade);
    }

    private ContentSpecIdBuilder(ContentSpecSubject subject, ContentSpecGrade grade) {
        this.subject = subject;
        this.grade = grade;
    }

    public ContentSpecIdBuilder claim(String claim) {
        this.claim = defaultString(claim);
        return this;
    }

    public ContentSpecIdBuilder target(String target) {
        this.target = defaultString(target);
        return this;
    }

    public ContentSpecIdBuilder ccss(String ccss) {
        this.ccss = defaultString(ccss);
        return this;
    }

    public ContentSpecIdBuilder domain(String domain) {
        this.domain = defaultString(domain);
        return this;
    }

    public ContentSpecIdBuilder emphasis(String emphasis) {
        this.emphasis = defaultString(emphasis);
        return this;
    }

    public ContentSpecIdBuilder contentCategory(String contentCategory) {
        this.contentCategory = defaultString(contentCategory);
        return this;
    }

    /**
     * Converts and validations the set components according to Content Specification ID business rules.
     *
     * @return a ContentSpecId pojo containing the fields set in the builder and derived fields.
     * @throws IdParseException if any set field has an invalid format or otherwise violates business rules.
     *        For example, the claim can be set to and empty string, 1, 2, 3, 4, C1, C2, C3, or C4. Any other
     *        value will produce an IdParseException.
     */
    public ContentSpecId build() throws IdParseException {
        if (subject == null || subject == ContentSpecSubject.UNSPECIFIED) {
            throw new IdParseException(INVALID, "ID must have a valid subject");
        }

        ContentSpecClaim convertedClaim = convertClaim(this.claim);
        String convertedTarget = convertTarget(this.target);

        // Derived values
        DomainCode derivedDomain = deriveDomain(subject, grade, convertedClaim, convertedTarget);
        boolean isMathClaim2Thru4 = (subject == MATH && convertedClaim != ContentSpecClaim.C1);
        String convertedDomain = convertDomain(domain, derivedDomain, isMathClaim2Thru4, grade, ccss);

        Emphasis emphasis = deriveEmphasis(this.subject, convertedClaim,
                grade, convertedTarget, ccss);
        validateEmphasis(this.emphasis, emphasis);

        String contentCategory = deriveContentCategory(this.subject, convertedClaim, emphasis, convertedDomain);
        validateContentCategory(this.contentCategory, contentCategory);
        int targetSet = deriveTargetSet(this.subject, grade, convertedClaim);

        return new ContentSpecId(
                this.subject,
                this.grade,
                convertedClaim,
                convertedTarget,
                this.ccss,
                convertedDomain,
                emphasis,
                contentCategory,
                targetSet);
    }

    private String convertTarget(String target) {
        String convertedTarget = trimToEmpty(target);
        if (convertedTarget.toUpperCase().startsWith("T") && target.length() > 1) {
            convertedTarget = convertedTarget.substring(1);
        }
        return convertedTarget;
    }

    private ContentSpecClaim convertClaim(String claimString) throws IdParseException {
        if (isBlank(claim)) {
            return ContentSpecClaim.UNSPECIFIED;
        }

        ContentSpecClaim claim = ContentSpecClaim.fromString(claimString);
        if (claim != ContentSpecClaim.UNSPECIFIED) {
            return claim;
        }

        throw new IdParseException(ErrorSeverity.INVALID,
                String.format("Expected claim but found '%s'.", claimString));
    }

    private String convertDomain(String domain, DomainCode derivedDomain, boolean mathClaim2thru4,
                                 ContentSpecGrade grade, String ccss)
            throws IdParseException {

        if (StringUtils.isBlank(domain) || domain.equals(NOT_APPLICABLE)) {
            return derivedDomain.getValue();
        }

        String convertedDomain = domainHandler.stripDashedDomain(domain, grade, ccss);
        // Math claims 2 to 4 will not have a domain, so accept the set one.
        // TODO: In some cases this can be a domain followed by extraneous characters. Why?
        if (mathClaim2thru4) {
            return convertedDomain;
        }

        if (derivedDomain == DomainCode.UNK) {
            return convertedDomain;
        }

        // Otherwise, check that the value is what we expect it to be.
        if (!(convertedDomain.equals(derivedDomain.getValue())
                || convertedDomain.equals(derivedDomain.getLegacyValue()))) {
            throw new IdParseException(ErrorSeverity.CORRECTED,
                    String.format("Incorrect domain set. Found '%s', expected '%s'.",
                            domain, derivedDomain.getValue()));
        }

        return derivedDomain.getValue();
    }

    private DomainCode deriveDomain(ContentSpecSubject subject, ContentSpecGrade grade,
                                    ContentSpecClaim claim, String target) {
        if (subject == ContentSpecSubject.ELA) {
            return domainHandler.deriveElaDomain(grade, claim, target);
        } else if (subject == MATH) {
            return domainHandler.deriveMathDomain(grade, claim, target);
        }

        return DomainCode.UNK;
    }

    private String deriveContentCategory(ContentSpecSubject subject, ContentSpecClaim claim,
                                         Emphasis emphasis, String domain) {
        if (subject != MATH) {
            return NOT_APPLICABLE;
        }

        if (claim == ContentSpecClaim.C1) {
            switch (emphasis) {
                case AS:
                    return SUPPORTING_CLUSTER;
                case M:
                    return PRIORITY_CLUSTER;
                default:
                    return NOT_APPLICABLE;
            }
        }

        if (isNotBlank(domain)) {
            return domain;
        }

        return NOT_APPLICABLE;
    }

    private int deriveTargetSet(ContentSpecSubject subject, ContentSpecGrade grade, ContentSpecClaim claim) {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return 0;
        }

        return targetHandler.getMathTargetSet(grade, target);
    }

    private Emphasis deriveEmphasis(ContentSpecSubject subject, ContentSpecClaim claim,
                                    ContentSpecGrade grade, String target, String ccss) {

        if (subject != MATH || claim != ContentSpecClaim.C1) {
            return Emphasis.NOT_APPLICABLE;
        }

        return emphasisHandler.computeEmphasis(grade, target, ccss);
    }

    private void validateEmphasis(String emphasis, Emphasis expectedEmphasis) throws IdParseException {
        if (isNotBlank(emphasis) && !emphasis.equals(expectedEmphasis.getValue())) {
            throw new IdParseException(CORRECTED,
                    String.format("Incorrect emphasis in parsed ID. Found '%s', expected '%s'.",
                            emphasis, expectedEmphasis.getValue()));
        }
    }

    private void validateContentCategory(String contentCategory, String expectedContentCategory)
            throws IdParseException
    {
        if (isNotBlank(contentCategory) && !contentCategory.equals(expectedContentCategory)) {
            throw new IdParseException(CORRECTED,
                    String.format("Incorrect content category in parsed ID. Found '%s', expected '%s'.",
                            contentCategory, expectedContentCategory));
        }
    }
}