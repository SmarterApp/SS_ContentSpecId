package org.opentestsystem.shared.contentspecid;

import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.IdParseException;

import static org.apache.logging.log4j.util.Strings.isBlank;
import static org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity.INVALID;


public class ContentSpecIdBuilder {
    private final ContentSpecSubject subject;
    private final String grade;
    private String claim;
    private String target;
    private String ccss;
    private String domain;
    private String emphasis;
    private String targetSet;

    ContentSpecIdBuilder(ContentSpecSubject subject, String grade) {
        this.subject = subject;
        this.grade = grade;
    }

    public ContentSpecIdBuilder claim(String claim) {
        this.claim = claim;
        return this;
    }

    public ContentSpecIdBuilder target(String target) {
        this.target = target;
        return this;
    }

    public ContentSpecIdBuilder ccss(String ccss) {
        this.ccss = ccss;
        return this;
    }

    public ContentSpecIdBuilder domain(String domain) {
        this.domain = domain;
        return this;
    }

    public ContentSpecIdBuilder emphasis(String emphasis) {
        this.emphasis = emphasis;
        return this;
    }

    public ContentSpecIdBuilder targetSet(String targetSet) {
        this.targetSet = targetSet;
        return this;
    }

    public ContentSpecId build() throws IdParseException {
        if (subject == null || subject == ContentSpecSubject.UNSPECIFIED) {
            throw new IdParseException(INVALID, "ID must have a valid subject");

        }

        ContentSpecGrade convertedGrade = convertGrade(this.grade);
        ContentSpecClaim convertedClaim = convertClaim(this.claim);

        return new ContentSpecId(
                this.subject,
                convertedGrade,
                convertedClaim,
                this.target,
                this.ccss,
                this.domain,
                this.emphasis,
                0);
    }

    protected ContentSpecGrade convertGrade(String gradeString) throws IdParseException {
        ContentSpecGrade grade = ContentSpecGrade.fromString(gradeString);
        if (grade != ContentSpecGrade.UNSPECIFIED) {
            return grade;
        }

        throw new IdParseException(INVALID,
                String.format("Expected grade in ID but found '%s'.", gradeString));
    }

    protected ContentSpecClaim convertClaim(String claimString) throws IdParseException {
        if (isBlank(claim)) {
            return ContentSpecClaim.UNSPECIFIED;
        }

        ContentSpecClaim claim = ContentSpecClaim.fromString(claimString);
        if (claim != ContentSpecClaim.UNSPECIFIED) {
            return claim;
        }

        throw new IdParseException(ErrorSeverity.INVALID,
                String.format("Expected claim but found '%s'.", claimString));
    }
}
