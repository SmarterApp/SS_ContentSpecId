package org.opentestsystem.shared.contentspecid.handlers;

import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.DomainCode;

import java.util.HashMap;
import java.util.Map;

import static org.apache.commons.lang3.StringUtils.isNotBlank;
import static org.apache.commons.lang3.StringUtils.trimToEmpty;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.A;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.EE;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.F;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.G;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.MD;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.N;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.NA;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.NBT;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.NF;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.NS;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.OA;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.R;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.RI;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.RL;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.RP;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.S;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.SL;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.SP;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.UNK;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.WA;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.WE;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.WG;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.WI;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.WN;
import static org.opentestsystem.shared.contentspecid.enums.DomainCode.WO;
import static org.opentestsystem.shared.contentspecid.handlers.TargetHandler.getMathTargetChar;

/**
 * Helper class for deriving domain for an ID and other domain related utilities.
 */
public class DomainHandler {
    private static final Map<ContentSpecGrade, DomainCode[]> MATH_DOMAIN_MAP = new HashMap<>();

    static {
        // Populate domains for grades 3 through 8 for targets 1 - 12 plus high school with arrays for targets 1 - 16
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G3,
                new DomainCode[]{OA, OA,  OA,  OA, NBT, NF, MD, MD, MD, MD,  G});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G4,
                new DomainCode[]{OA, OA,  OA, NBT, NBT, NF, NF, NF, MD, MD, MD, G});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G5,
                new DomainCode[]{OA, OA, NBT, NBT,  NF, NF, MD, MD, MD,  G,  G});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G6,
                new DomainCode[]{RP, NS,  NS,  NS,  EE, EE, EE,  G, SP, SP});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G7,
                new DomainCode[]{RP, NS,  EE,  EE,   G,  G, SP, SP, SP});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G8,
                new DomainCode[]{NS, EE,  EE,  EE,   F,  F,  G,  G,  G, SP});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.GHS,
                new DomainCode[]{N, N, N, A, A, A, A, A, A, A, F, F, F, F, G, S});
    }


    public DomainCode deriveMathDomain(ContentSpecGrade grade, ContentSpecClaim claim, String target) {
        // Must be claim 1
        if (claim != ContentSpecClaim.C1) {
            return NA;
        }

        char targetValue = getMathTargetChar(target);
        int index = targetValue - 'A';

        if (MATH_DOMAIN_MAP.containsKey(grade)) {
            DomainCode[] domainsForGrade = MATH_DOMAIN_MAP.get(grade);
            if (index >= 0 && index < domainsForGrade.length) {
                return domainsForGrade[index];
            }
        }

        return UNK;
    }

    public DomainCode deriveElaDomain(ContentSpecGrade grade, ContentSpecClaim claim, String target) {
        int targetValue = TargetHandler.computeElaTargetValue(target);
        if (targetValue == TargetHandler.BAD_TARGET_VALUE) {
            return UNK;
        }

        switch (claim) {
            case C1:
                return (targetValue < 8) ? RL : RI;

            case C2:
                if (grade.compareTo(ContentSpecGrade.G5) <= 0) {
                    if (targetValue <= 2) return WN;
                    else if (targetValue <= 5) return WI;
                    else if (targetValue <= 7) return WO;
                    else return WG;
                } else {
                    if (targetValue <= 2) return WN;
                    else if (targetValue <= 5) return WE;
                    else if (targetValue <= 7) return WA;
                    else return WG;
                }

            case C3:
                return SL;

            case C4:
                return R;

            default:
                return UNK;
        }
    }

    public String stripDashedDomain(String domain, ContentSpecGrade grade, String ccss) {
        String converted = trimToEmpty(domain);
        if (grade == ContentSpecGrade.GHS) {
            int dash = converted.indexOf('-');
            if (dash > 0 && ccss.startsWith(converted)) {
                return converted.substring(0, dash);
            }
        }
        return converted;
    }

    public static String formatDashedDomain(String domain, ContentSpecGrade grade, String ccss) {
        if (grade == ContentSpecGrade.GHS && isNotBlank(ccss)) {
            int dash = ccss.indexOf('-');
            int dot = ccss.indexOf('.');
            if (dash > 0 && dot > dash && ccss.startsWith(domain)) {
                return ccss.substring(0, dot);
            }
        }

        return domain;
    }
}
