package org.opentestsystem.shared.contentspecid.handlers;

import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.DomainCode;

import java.util.HashMap;
import java.util.Map;

/**
 * Helper utility to handle the fairly complicated logic of deriving a domain from an ID's grade, claim, and target.
 */
public class DomainHandler {
    private static final Map<ContentSpecGrade, DomainCode[]> MATH_DOMAIN_MAP = new HashMap<>();

    static {
        // Populate domains for grades 3 through 8 for targets 1 - 12 plus high school with arrays for targets 1 - 16
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G3,
                new DomainCode[]{DomainCode.OA, DomainCode.OA, DomainCode.OA, DomainCode.OA, DomainCode.NBT, DomainCode.NF, DomainCode.MD, DomainCode.MD, DomainCode.MD, DomainCode.MD, DomainCode.G, DomainCode.UNK});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G4,
                new DomainCode[]{DomainCode.OA, DomainCode.OA, DomainCode.OA, DomainCode.NBT, DomainCode.NBT, DomainCode.NF, DomainCode.NF, DomainCode.NF, DomainCode.MD, DomainCode.MD, DomainCode.MD, DomainCode.G});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G5,
                new DomainCode[]{DomainCode.OA, DomainCode.OA, DomainCode.NBT, DomainCode.NBT, DomainCode.NF, DomainCode.NF, DomainCode.MD, DomainCode.MD, DomainCode.MD, DomainCode.G, DomainCode.G, DomainCode.UNK});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G6,
                new DomainCode[]{DomainCode.RP, DomainCode.NS, DomainCode.NS, DomainCode.NS, DomainCode.EE, DomainCode.EE, DomainCode.EE, DomainCode.G, DomainCode.SP, DomainCode.SP, DomainCode.UNK, DomainCode.UNK});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G7,
                new DomainCode[]{DomainCode.RP, DomainCode.NS, DomainCode.EE, DomainCode.EE, DomainCode.G, DomainCode.G, DomainCode.SP, DomainCode.SP, DomainCode.SP, DomainCode.UNK, DomainCode.UNK, DomainCode.UNK});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.G8,
                new DomainCode[]{DomainCode.NS, DomainCode.EE, DomainCode.EE, DomainCode.EE, DomainCode.F, DomainCode.F, DomainCode.G, DomainCode.G, DomainCode.G, DomainCode.SP, DomainCode.UNK, DomainCode.UNK});
        MATH_DOMAIN_MAP.put(ContentSpecGrade.GHS,
                new DomainCode[]{DomainCode.N, DomainCode.N, DomainCode.N, DomainCode.A, DomainCode.A, DomainCode.A, DomainCode.A, DomainCode.A, DomainCode.A, DomainCode.A, DomainCode.F, DomainCode.F, DomainCode.F, DomainCode.F, DomainCode.G, DomainCode.S});
    }


    public String deriveMathDomain(ContentSpecGrade grade, ContentSpecClaim claim, String target) {
        // Must be claim 1
        if (claim != ContentSpecClaim.C1) {
            return DomainCode.NA.name();
        }

        int targetValue = TargetHandler.computeMathTargetValue(target);
        if (targetValue == TargetHandler.BAD_TARGET_VALUE) {
            return "";
        }

        int index = targetValue - 1;

        DomainCode domain = DomainCode.UNK;

        if (MATH_DOMAIN_MAP.containsKey(grade)) {
            DomainCode[] domainsForGrade = MATH_DOMAIN_MAP.get(grade);
            if (index >= 0 && targetValue < domainsForGrade.length) {
                domain = domainsForGrade[index];
            }
        }

        return (domain == DomainCode.UNK) ? "" : domain.name();
    }

    public String deriveElaDomain(ContentSpecGrade grade, ContentSpecClaim claim, String target) {
        int targetValue = TargetHandler.computeElaTargetValue(target);
        if (targetValue == TargetHandler.BAD_TARGET_VALUE) {
            return "";
        }

        DomainCode domainCode;

        switch (claim) {
            case C1:
                domainCode = (targetValue < 8) ? DomainCode.RL : DomainCode.RI;
                break;

            case C2:
                if (grade.compareTo(ContentSpecGrade.G5) <= 0) {
                    if (targetValue <= 2) domainCode = DomainCode.WN;
                    else if (targetValue <= 5) domainCode = DomainCode.WI;
                    else if (targetValue <= 7) domainCode = DomainCode.WO;
                    else domainCode = DomainCode.WG;
                } else {
                    if (targetValue <= 2) domainCode = DomainCode.WN;
                    else if (targetValue <= 5) domainCode = DomainCode.WE;
                    else if (targetValue <= 7) domainCode = DomainCode.WA;
                    else domainCode = DomainCode.WG;
                }
                break;

            case C3:
                domainCode = DomainCode.SL;
                break;

            case C4:
                domainCode = DomainCode.R;
                break;

            default:
                domainCode = DomainCode.UNK;
                break;
        }

        return (domainCode == DomainCode.UNK) ? "" : domainCode.name();
    }
}
