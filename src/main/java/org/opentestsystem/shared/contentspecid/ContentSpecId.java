package org.opentestsystem.shared.contentspecid;


import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecEmphasis;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.IdValidationException;
import org.opentestsystem.shared.contentspecid.handlers.DomainHandler;
import org.opentestsystem.shared.contentspecid.handlers.EmphasisHandler;
import org.opentestsystem.shared.contentspecid.handlers.TargetHandler;

import java.util.Objects;

import static org.apache.commons.lang3.StringUtils.isBlank;

/**
 * POJO representation of the components comprising Content Spec ID. This representation should be independent
 * of its creation method, whether built up from components, parsed from an enhanced ID string, or parsed
 * from one of the legacy formats.
 */
@Getter
@Setter
@ToString
public class ContentSpecId {
    private final DomainHandler domainHandler;
    private final EmphasisHandler emphasisHandler;
    private final TargetHandler targetHandler;

    private static final ContentSpecIdConverter converter = new ContentSpecIdConverter();
    private ContentSpecSubject subject = ContentSpecSubject.UNSPECIFIED;
    private ContentSpecGrade grade = ContentSpecGrade.UNSPECIFIED;
    private ContentSpecClaim claim = ContentSpecClaim.UNSPECIFIED;
    private String target = "";
    private String ccss = ""; // Common core state standard
    private String domain = null;
    private ContentSpecEmphasis emphasis = ContentSpecEmphasis.NOT_APPLICABLE;
    private String contentCategory;
    private int targetSet = 0;


    public ContentSpecId() {
        domainHandler = new DomainHandler();
        emphasisHandler = new EmphasisHandler();
        targetHandler = new TargetHandler();
    }

    @SuppressWarnings("unused")
    public ContentSpecId(DomainHandler domainHandler, EmphasisHandler emphasisComputer,
                         TargetHandler targetHandler) {
        this.domainHandler = domainHandler;
        this.emphasisHandler = emphasisComputer;
        this.targetHandler = targetHandler;
    }

    ContentSpecId(ContentSpecSubject subject, ContentSpecGrade grade, ContentSpecClaim claim, String target, String ccss, String domain, ContentSpecEmphasis emphasis, String contentCategory, int targetSet) {
        this();
        this.subject = subject;
        this.grade = grade;
        this.claim = claim;
        this.target = target;
        this.ccss = ccss;
        this.domain = domain;
        this.emphasis = emphasis;
        this.contentCategory = contentCategory;
        this.targetSet = targetSet;
    }

    public static ContentSpecIdBuilder builder(ContentSpecSubject subject, String grade) {
        return new ContentSpecIdBuilder(subject, grade);
    }

    public boolean isMath() {
        return subject == ContentSpecSubject.MATH;
    }

    public boolean isEla() {
        return subject == ContentSpecSubject.ELA;
    }

    public String deriveDomain() {

        if (isEla()) {
            return domainHandler.deriveElaDomain(getGrade(), getClaim(), getTarget()).getValue();
        } else if (isMath()) {
            return domainHandler.deriveMathDomain(getGrade(), getClaim(), getTarget()).getValue();
        }

        return "";
    }

    public void setSubject(ContentSpecSubject subject) {
        this.subject = subject == null ? ContentSpecSubject.UNSPECIFIED : subject;
    }

    public void setGrade(ContentSpecGrade grade) {
        this.grade = grade == null ? ContentSpecGrade.UNSPECIFIED : grade;
    }

    public void setClaim(ContentSpecClaim claim) {
        this.claim = claim == null ? ContentSpecClaim.UNSPECIFIED : claim;
    }

    public ContentSpecEmphasis getEmphasis() {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return ContentSpecEmphasis.NOT_APPLICABLE;
        }

        return emphasisHandler.computeEmphasis(getGrade(), getTarget(), getCcss());
    }

    public int getTargetSet() {
        if (subject != ContentSpecSubject.MATH || claim != ContentSpecClaim.C1) {
            return 0;
        }

        return targetHandler.getMathTargetSet(grade, target);
    }

    public void validateFor(ContentSpecFormat format) throws IdValidationException {
        // Check for general validity
         validate();

        // Check for valid format and for subject match
        boolean requiresDetail = format.isLegacy();

        switch (format) {
            case ENHANCED:
                if (subject == ContentSpecSubject.UNSPECIFIED) {
                    throw new IdValidationException(ErrorSeverity.INVALID, "Subject is Unspecified.");
                }
                break;

            case ELA_V1:
                if (subject != ContentSpecSubject.ELA) {
                    throw new IdValidationException(ErrorSeverity.INVALID, "For format ElaV1, Subject must be ELA.");
                }
                break;

            case MATH_V4:
            case MATH_V5:
            case MATH_V6:
                if (subject != ContentSpecSubject.MATH) {
                    throw new IdValidationException(ErrorSeverity.INVALID,
                            String.format("For format %s, Subject must be Math.", format.name()));
                }
                break;

            default:
                throw new IdValidationException(ErrorSeverity.INVALID, String.format("Invalid format '%s'.", format));
        }

        if (requiresDetail) {
            if (grade == ContentSpecGrade.UNSPECIFIED) {
                throw new IdValidationException(ErrorSeverity.INVALID,
                        String.format("For format %s, Grade must be specified.", format.name()));
            }

            if (claim == ContentSpecClaim.UNSPECIFIED) {
                throw new IdValidationException(ErrorSeverity.INVALID,
                        String.format("For format %s, Claim must be specified.", format.name()));
            }

            if (isBlank(target)) {
                throw new IdValidationException(ErrorSeverity.INVALID,
                        String.format("For format %s, Target must be specified.", format.name()));
            }
        }
    }

    // TODO: seems to be incorrect. There are IDs in the "good" test files that would fail this validation.
    private void validate() { //throws IdValidationException {
//        if (subject == ContentSpecSubject.UNSPECIFIED) {
//            throw new IdValidationException(INVALID, "Subject is not valid.");
//        }
//
//        if (grade == ContentSpecGrade.UNSPECIFIED) {
//            throw new IdValidationException(INVALID, "Grade is not valid.");
//        }
//
//        if (claim == ContentSpecClaim.UNSPECIFIED) {
//            throw new IdValidationException(INVALID, "Claim is not valid.");
//        }
//
//        if (isBlank(target)) {
//            throw new IdValidationException(INVALID, "Target has not been specified.");
//        }
//
//        if (isBlank(ccss) &&
//                ((subject == ContentSpecSubject.ELA) ||
//                        (subject == ContentSpecSubject.MATH && claim == ContentSpecClaim.C1))) {
//            throw new IdValidationException(INVALID, "CCSS has not been specified.");
//        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ContentSpecId that = (ContentSpecId) o;
        return subject == that.subject &&
                grade == that.grade &&
                claim == that.claim &&
                Objects.equals(target, that.target) &&
                Objects.equals(ccss, that.ccss) &&
                Objects.equals(domain, that.domain);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subject, grade, claim, target, ccss, domain);
    }

}
