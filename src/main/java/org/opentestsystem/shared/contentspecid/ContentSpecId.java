package org.opentestsystem.shared.contentspecid;


import org.opentestsystem.shared.contentspecid.enums.ContentSpecClaim;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject;
import org.opentestsystem.shared.contentspecid.enums.Emphasis;

/**
 * Immutable POJO representation of the components comprising Content Spec ID. This representation should
 * be independent of its creation method, whether built up from components, parsed from an enhanced ID string,
 * or parsed from one of the legacy formats.
 */
public final class ContentSpecId {

    // Primary fields
    private final ContentSpecSubject subject;
    private final ContentSpecGrade grade;
    private final ContentSpecClaim claim;
    private final String target;
    private final String ccss; // Common core state standard

    // Derived fields
    private final String domain;
    private final Emphasis emphasis;
    private final String contentCategory;
    private final int targetSet;

    @java.beans.ConstructorProperties(
            {"subject", "grade", "claim", "target", "ccss", "domain", "emphasis", "contentCategory", "targetSet"})
    public ContentSpecId(ContentSpecSubject subject, ContentSpecGrade grade, ContentSpecClaim claim, String target,
                         String ccss, String domain, Emphasis emphasis, String contentCategory, int targetSet) {
        this.subject = subject;
        this.grade = grade;
        this.claim = claim;
        this.target = target;
        this.ccss = ccss;
        this.domain = domain;
        this.emphasis = emphasis;
        this.contentCategory = contentCategory;
        this.targetSet = targetSet;
    }

    /**
     * Convenience method to check if ID is for a Math item based on the subject.
     * @return true if Math, false if ELA or Unknown
     */
    public boolean isMath() {
        return subject == ContentSpecSubject.MATH;
    }

    /**
     * Convenience method to check if ID is for an ELA item based on the subject.
     * @return true if ELA, false if Math or Unknown
     */
    public boolean isEla() {
        return subject == ContentSpecSubject.ELA;
    }

    public ContentSpecSubject getSubject() {
        return this.subject;
    }

    public ContentSpecGrade getGrade() {
        return this.grade;
    }

    public ContentSpecClaim getClaim() {
        return this.claim;
    }

    public String getTarget() {
        return this.target;
    }

    public String getCcss() {
        return this.ccss;
    }

    public String getDomain() {
        return this.domain;
    }

    public Emphasis getEmphasis() {
        return this.emphasis;
    }

    public String getContentCategory() {
        return this.contentCategory;
    }

    public int getTargetSet() {
        return this.targetSet;
    }


    public boolean equals(final Object o) {
        if (o == this) return true;
        if (!(o instanceof ContentSpecId)) return false;
        final ContentSpecId other = (ContentSpecId) o;
        final Object this$subject = this.getSubject();
        final Object other$subject = other.getSubject();
        if (this$subject == null ? other$subject != null : !this$subject.equals(other$subject)) return false;
        final Object this$grade = this.getGrade();
        final Object other$grade = other.getGrade();
        if (this$grade == null ? other$grade != null : !this$grade.equals(other$grade)) return false;
        final Object this$claim = this.getClaim();
        final Object other$claim = other.getClaim();
        if (this$claim == null ? other$claim != null : !this$claim.equals(other$claim)) return false;
        final Object this$target = this.getTarget();
        final Object other$target = other.getTarget();
        if (this$target == null ? other$target != null : !this$target.equals(other$target)) return false;
        final Object this$ccss = this.getCcss();
        final Object other$ccss = other.getCcss();
        if (this$ccss == null ? other$ccss != null : !this$ccss.equals(other$ccss)) return false;
        final Object this$domain = this.getDomain();
        final Object other$domain = other.getDomain();
        if (this$domain == null ? other$domain != null : !this$domain.equals(other$domain)) return false;
        final Object this$emphasis = this.getEmphasis();
        final Object other$emphasis = other.getEmphasis();
        if (this$emphasis == null ? other$emphasis != null : !this$emphasis.equals(other$emphasis)) return false;
        final Object this$contentCategory = this.getContentCategory();
        final Object other$contentCategory = other.getContentCategory();
        if (this$contentCategory == null ? other$contentCategory != null : !this$contentCategory.equals(other$contentCategory))
            return false;
        if (this.getTargetSet() != other.getTargetSet()) return false;
        return true;
    }

    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $subject = this.getSubject();
        result = result * PRIME + ($subject == null ? 43 : $subject.hashCode());
        final Object $grade = this.getGrade();
        result = result * PRIME + ($grade == null ? 43 : $grade.hashCode());
        final Object $claim = this.getClaim();
        result = result * PRIME + ($claim == null ? 43 : $claim.hashCode());
        final Object $target = this.getTarget();
        result = result * PRIME + ($target == null ? 43 : $target.hashCode());
        final Object $ccss = this.getCcss();
        result = result * PRIME + ($ccss == null ? 43 : $ccss.hashCode());
        final Object $domain = this.getDomain();
        result = result * PRIME + ($domain == null ? 43 : $domain.hashCode());
        final Object $emphasis = this.getEmphasis();
        result = result * PRIME + ($emphasis == null ? 43 : $emphasis.hashCode());
        final Object $contentCategory = this.getContentCategory();
        result = result * PRIME + ($contentCategory == null ? 43 : $contentCategory.hashCode());
        result = result * PRIME + this.getTargetSet();
        return result;
    }

    public String toString() {
        return "ContentSpecId(subject=" + this.getSubject() +
                ", grade=" + this.getGrade() +
                ", claim=" + this.getClaim() +
                ", target=" + this.getTarget() +
                ", ccss=" + this.getCcss() +
                ", domain=" + this.getDomain() +
                ", emphasis=" + this.getEmphasis() +
                ", contentCategory=" + this.getContentCategory() +
                ", targetSet=" + this.getTargetSet() + ")";
    }
}
