package org.opentestsystem.ss.contentspecid;

import org.junit.jupiter.api.Test;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.opentestsystem.ss.contentspecid.ContentSpecIdFormat.ELA_V1;
import static org.opentestsystem.ss.contentspecid.ContentSpecIdFormat.MATH_V4;
import static org.opentestsystem.ss.contentspecid.ContentSpecIdFormat.MATH_V5;
import static org.opentestsystem.ss.contentspecid.ContentSpecIdFormat.MATH_V6;

/**
 * Created by Greg Charles on 11/9/18.
 */
class LegacyContentSpecIdParserTest {
    private LegacyContentSpecIdParser parser = new LegacyContentSpecIdParser();

    @Test
    void shouldRecognizeEla() {
        final String legacyEla = "SBAC-ELA-v1:1-IT|8-3|3.RI.1";

        try {
            assertThat(parser.getFormatType(legacyEla), is(ELA_V1));
        } catch (IdParseException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeMathV4() {
        final String legacyMath = "SBAC-MA-v4:1|MD|G-3|m|3.MD.1";

        try {
            assertThat(parser.getFormatType(legacyMath), is(MATH_V4));
        } catch (IdParseException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeMathV5() {
        final String legacyMath = "SBAC-MA-v5:1|OA|B-3|m|3.OA.B";

        try {
            assertThat(parser.getFormatType(legacyMath), is(MATH_V5));
        } catch (IdParseException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeMathV6() {
        final String legacyMath = "SBAC-MA-v6:1|P|TS01|I-3";

        try {
            assertThat(parser.getFormatType(legacyMath), is(MATH_V6));
        } catch (IdParseException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldThrowExceptionOnUnrecognizedFormat() {
        final String bad = "bad";

        try {
            parser.getFormatType(bad);
            fail("Expected IdParseException");
        } catch (IdParseException e) {
            assertThat(e.getErrorSeverity(), is(ErrorSeverity.INVALID));
        } catch (Throwable t) {
            fail("Wrong exception type: " + t.getCause());
        }
    }
}