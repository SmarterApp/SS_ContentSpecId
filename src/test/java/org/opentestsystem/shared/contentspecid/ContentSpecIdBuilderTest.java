package org.opentestsystem.shared.contentspecid;

import org.junit.jupiter.api.Test;
import org.opentestsystem.shared.contentspecid.enums.Emphasis;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.ValidationException;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.opentestsystem.shared.contentspecid.ContentSpecIdBuilder.getBuilder;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.G3;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.G7;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.GHS;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject.ELA;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecSubject.MATH;


/**
 * Tests of the Content Spec ID builder.
 */
class ContentSpecIdBuilderTest {

    @Test
    void shouldBuildMathClaimOneId() {
        // Sample of formatted ID: M.GHS.C1F.TM.HSF.IF.C.7
        try {
            ContentSpecId id = getBuilder(MATH, GHS)
                    .claim("C1")
                    .target("TM")
                    .ccss("HSF.IF.C.7")
                    .build();

            // Check derived values
            assertThat(id.getDomain(), is("F"));
            assertThat(id.getEmphasis(), is(Emphasis.M));
            assertThat(id.getContentCategory(), is("P"));
            assertThat(id.getTargetSet(), is(6));

        } catch (ValidationException e) {
            fail(e);
        }
    }

    @Test
    void shouldBuildMathClaimTwoId() {
        // Sample of formatted ID: M.G7.C2.TB
        try {
            ContentSpecId id = getBuilder(MATH, G7)
                    .claim("C2")
                    .target("TB")
                    .build();

            // Check derived values
            assertThat(id.getDomain(), is("NA"));
            assertThat(id.getEmphasis(), is(Emphasis.NOT_APPLICABLE));
            assertThat(id.getContentCategory(), is("NA"));
            assertThat(id.getTargetSet(), is(0));

        } catch (ValidationException e) {
            fail(e);
        }
    }

    @Test
    void shouldBuildElaId() {
        // Sample of formatted ID: E.G3.C1RL.T3.L.3.4a
        try {
            ContentSpecId id = getBuilder(ELA, G3)
                    .claim("C1")
                    .target("T3")
                    .domain("RL")
                    .build();

            // Check derived values
            assertThat(id.getDomain(), is("RL"));
            assertThat(id.getEmphasis(), is(Emphasis.NOT_APPLICABLE));
            assertThat(id.getContentCategory(), is("NA"));
            assertThat(id.getTargetSet(), is(0));

        } catch (ValidationException e) {
            fail(e);
        }
    }

    @Test
    void shouldErrorIfDomainMismatch() {
        // Sample of formatted ID: E.G3.C1RL.T3.L.3.4a
        try {
            getBuilder(ELA, G3)
                    .claim("C1")
                    .target("T3")
                    .domain("XX")
                    .build();

            fail("Expected error for bad domain XX");
        } catch (ValidationException e) {
            assertThat(e.getErrorSeverity(), is(ErrorSeverity.CORRECTED));
        }
    }

    @Test
    void shouldHandelLegacyValues() {
        // Sample of formatted ID: SBAC-ELA-v1:1-LT|7-3|3.RL.4
        try {
            ContentSpecId id = getBuilder(ELA, G3)
                    .claim("1")
                    .target("3")
                    .domain("LT")
                    .build();

            // Check derived values
            assertThat(id.getDomain(), is("RL"));
            assertThat(id.getEmphasis(), is(Emphasis.NOT_APPLICABLE));
            assertThat(id.getContentCategory(), is("NA"));
            assertThat(id.getTargetSet(), is(0));

        } catch (ValidationException e) {
            fail(e);
        }
    }
}