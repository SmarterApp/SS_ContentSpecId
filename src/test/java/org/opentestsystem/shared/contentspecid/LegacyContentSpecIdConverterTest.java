package org.opentestsystem.shared.contentspecid;

import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.jupiter.api.Test;
import org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade;
import org.opentestsystem.shared.contentspecid.exceptions.ErrorSeverity;
import org.opentestsystem.shared.contentspecid.exceptions.ValidationException;
import org.opentestsystem.shared.contentspecid.legacy.LegacyContentSpecIdConverter;

import java.util.Arrays;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ELA_V1;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V4;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V5;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.MATH_V6;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.G3;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.G4;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.G5;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.G6;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecGrade.GHS;

/**
 * Created by Greg Charles on 11/9/18.
 */
class LegacyContentSpecIdConverterTest {
    private LegacyContentSpecIdConverter parser = new LegacyContentSpecIdConverter();

    @Test
    void shouldRecognizeEla() {
        final String legacyEla = "SBAC-ELA-v1:1-IT|8-3|3.RI.1";

        try {
            assertThat(parser.getFormatType(legacyEla), is(ELA_V1));
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeMathV4() {
        final String legacyMath = "SBAC-MA-v4:1|MD|G-3|m|3.MD.1";

        try {
            assertThat(parser.getFormatType(legacyMath), is(MATH_V4));
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeMathV5() {
        final String legacyMath = "SBAC-MA-v5:1|OA|B-3|m|3.OA.B";

        try {
            assertThat(parser.getFormatType(legacyMath), is(MATH_V5));
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeMathV6() {
        final String legacyMath = "SBAC-MA-v6:1|P|TS01|I-3";

        try {
            assertThat(parser.getFormatType(legacyMath), is(MATH_V6));
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldThrowExceptionOnUnrecognizedFormat() {
        final String bad = "bad";

        try {
            parser.getFormatType(bad);
            fail("Expected ValidationException");
        } catch (ValidationException e) {
            MatcherAssert.assertThat(e.getErrorSeverity(), CoreMatchers.is(ErrorSeverity.INVALID));
        } catch (Throwable t) {
            fail("Wrong exception type: " + t.getCause());
        }
    }


    @Test
    void shouldTranslateLegacyElaDomains() {
        ContentSpecId id;

        try {

            for (ContentSpecGrade grade : range(G3, GHS)) {
                for (int target = 1; target <= 7; target++) {
                    id = parser.parse("SBAC-ELA-v1:1-LT|" + target, grade);
                    assertThat(id.getDomain(), is("RL"));
                }

                for (int target = 8; target <= 14; target++) {
                    id = parser.parse("SBAC-ELA-v1:1-IT|" + target, grade);
                    assertThat(id.getDomain(), is("RI"));
                }
            }

            for (ContentSpecGrade grade : range(G3, G5)) {
                for (int target = 1; target <= 2; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WN"));
                }
                for (int target = 3; target <= 5; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WI"));
                }
                for (int target = 6; target <= 7; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WO"));
                }
                for (int target = 8; target <= 10; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WG"));
                }
            }

            for (ContentSpecGrade grade : range(G6, GHS)) {
                for (int target = 1; target <= 2; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WN"));
                }
                for (int target = 3; target <= 5; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WE"));
                }
                for (int target = 6; target <= 7; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WA"));
                }
                for (int target = 8; target <= 10; target++) {
                    id = parser.parse("SBAC-ELA-v1:2-W|" + target, grade);
                    assertThat(id.getDomain(), is("WG"));
                }
            }

            for (ContentSpecGrade grade : range(G3, GHS)) {
                for (int target = 1; target <= 10; target++) {
                    id = parser.parse("SBAC-ELA-v1:3-L|" + target, grade);
                    assertThat(id.getDomain(), is("SL"));
                }
            }

            for (ContentSpecGrade grade : range(G3, GHS)) {
                for (int target = 1; target <= 10; target++) {
                    id = parser.parse("SBAC-ELA-v1:4-CR|" + target, grade);
                    assertThat(id.getDomain(), is("R"));
                }
            }
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldNotTranslateElaDomainsWhenNoTarget() {
        try {
            ContentSpecId id = parser.parse("SBAC-ELA-v1:1-LT", G5);
            assertThat(id.getDomain(), is("LT"));
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldHandlePartialIds() {
        ContentSpecIdConverter formatter = new ContentSpecIdConverter();
        ContentSpecId id;
        try {
            id = parser.parse("SBAC-MA-v6:1", G4);
            assertThat(formatter.format(id), is("M.G4.C1"));
            id = parser.parse("SBAC-MA-v6:1|P", G4);
            assertThat(formatter.format(id), is("M.G4.C1"));
            id = parser.parse("SBAC-MA-v6:1|P|TS01", G4);
            assertThat(formatter.format(id), is("M.G4.C1"));
            id = parser.parse("SBAC-MA-v6:1|P|TS01|A-4", G4);
            assertThat(formatter.format(id), is("M.G4.C1OA.TA"));
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldErrorOnInvalidContentCategory() {
        try {
            parser.parse("SBAC-MA-v6:1|S|TS01|A-4");
            fail("Invalid Content Category");
        } catch (ValidationException e) {
            // OK
        }
    }

    @Test
    void shouldErrorOnInvalidEmphasis() {
        try {
            parser.parse("SBAC-MA-v5:1|OA|A-4|a/s|4.OA.2");
            fail("Invalid Emphasis");
        } catch (ValidationException e) {
            // OK
        }
    }

    // Returns range of grades
    private ContentSpecGrade[] range(ContentSpecGrade start, ContentSpecGrade end) {
        ContentSpecGrade [] all = ContentSpecGrade.values();
        int startIndex = -1;
        int endIndex = -1;
        for (int i = 0; i < all.length; i++) {
            if (all[i] == start) {
                startIndex = i;
            }
            if (all[i] == end) {
                endIndex = i;
            }
        }

        if (startIndex < 0 || endIndex < 0 || endIndex < startIndex) {
            throw new RuntimeException("Cannot get range for grades " + start + " and " + end);
        }

        return Arrays.copyOfRange(all, startIndex, endIndex + 1);
    }
}

