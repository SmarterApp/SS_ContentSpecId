package org.opentestsystem.shared.contentspecid;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.opentestsystem.shared.contentspecid.exceptions.ValidationException;
import org.opentestsystem.shared.contentspecid.legacy.LegacyContentSpecIdConverter;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.anyString;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.opentestsystem.shared.contentspecid.enums.ContentSpecFormat.ENHANCED;


/**
 * Created by Greg Charles on 11/9/18.
 */
@ExtendWith(MockitoExtension.class)
class ContentSpecIdConverterTest {

    @InjectMocks
    private ContentSpecIdConverter parser;

    @Mock
    private LegacyContentSpecIdConverter legacyParser;

    @BeforeEach
    void setUp() {
    }

    @Test
    void shouldRecognizeEnhancedElaId() {
        final String elaEnhanced  = "E.G3.C1RL.T3.L.3.4";

        try {
            assertThat(parser.getFormatType(elaEnhanced), is(ENHANCED));
            verify(legacyParser, never()).getFormatType(anyString());
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldRecognizeEnhancedMathId() {
        final String mathEnhanced = "M.G3.C1MD.TI.3.MD.C.7b";

        try {
            assertThat(parser.getFormatType(mathEnhanced), is(ENHANCED));
            verify(legacyParser, never()).getFormatType(anyString());
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }

    @Test
    void shouldDeferToLegacyForOthers() {
        final String legacy = "SBAC-ELA-v1:1-IT|8-3|3.RI.1";
        try {
            parser.getFormatType(legacy);
            verify(legacyParser, times(1)).getFormatType(anyString());
        } catch (ValidationException e) {
            fail("Parse exception: " + e.getMessage());
        }
    }
}