/*
 *  Copyright 2018 Regents of the University of California.
 *
 *  Licensed under the Educational Community License, Version 2.0 (the "license");
 *  you may not use this file except in compliance with the License. You may
 *  obtain a copy of the license at
 *
 *  https://opensource.org/licenses/ECL-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'io.github.robwin:jgitflow-gradle-plugin:0.5.0'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'findbugs'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot' version '1.5.2.RELEASE'
    id 'com.jfrog.artifactory'    version '4.4.14'
}

apply plugin: 'io.github.robwin.jgitflow'
apply plugin: 'project-report'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    compile 'org.apache.commons:commons-lang3:3.5'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.1.0'
    testCompile 'org.mockito:junit-jupiter:2.20.0'
    testCompile 'org.mockito:mockito-core:2.20.0'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
}

/**
 * Make library jar executable. Executing it will start a command line API.
 */
jar {
    manifest {
        attributes 'Main-Class': 'org.opentestsystem.shared.contentspecid.cli.CommandLineRunner'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

test {
    useJUnitPlatform()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Dalston.RELEASE'
    }
}

// no repackaging, we want a simple library, not a fat jar
bootRepackage {
    enabled = false
}

/***************************
 * publishing
 ***************************/

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java

        artifact sourceJar {
            classifier "sources"
        }
    }
}

artifactory {
    contextUrl = artifactoryUrl

    publish {
        repository {
            repoKey  = project.version.contains('-SNAPSHOT') ? project.artifactorySnapshotPublish : project.artifactoryReleasePublish
            username = project.artifactoryUser
            password = project.artifactoryPassword
            maven	 = true
        }
        defaults {
            publications ('mavenJava')
        }
    }

    resolve {
        repository {
            repoKey = 'libs-releases'
            maven	= true
        }
    }
}

/***************************
 * Checkstyle
 ***************************/

checkstyle {
    toolVersion = 7.1
    ignoreFailures = true
}

/***************************
 * PMD
 ***************************/

pmd {
    ignoreFailures = true

    ruleSets = [
            'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-j2ee',
            'java-javabeans',
            'java-junit',
            'java-naming',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-sunsecure',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

/***************************
 * FindBugs
 ***************************/

findbugs {
    ignoreFailures = true
    reportLevel = "medium"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
        html.stylesheet resources.text.fromFile('config/findbugs/findbugs-color.xsl')
    }
}

/***************************
 * gradle wrapper
 ***************************/

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

/***************************
 * Lifecycle enhancements
 ***************************/

tasks.artifactoryPublish.dependsOn 'build'

test.finalizedBy(jacocoTestReport)
